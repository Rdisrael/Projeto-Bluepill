
TESTEBP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056ac  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c79c  0800c79c  0000e05c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c79c  0800c79c  0000e05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c79c  0800c79c  0000e05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c79c  0800c79c  0000d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800c7a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  2000005c  0800c800  0000e05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800c800  0000e69c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df54  00000000  00000000  0000e085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002531  00000000  00000000  0001bfd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be3  00000000  00000000  0001f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190e3  00000000  00000000  0002003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d6f  00000000  00000000  0003911e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909bb  00000000  00000000  0004be8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  000dc88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e1224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080070d8 	.word	0x080070d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080070d8 	.word	0x080070d8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	@ 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ba6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	@ 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	@ 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <__gesf2>:
 8000df4:	f04f 3cff 	mov.w	ip, #4294967295
 8000df8:	e006      	b.n	8000e08 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__lesf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	e002      	b.n	8000e08 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__cmpsf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	bf18      	it	ne
 8000e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e1e:	d011      	beq.n	8000e44 <__cmpsf2+0x40>
 8000e20:	b001      	add	sp, #4
 8000e22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e26:	bf18      	it	ne
 8000e28:	ea90 0f01 	teqne	r0, r1
 8000e2c:	bf58      	it	pl
 8000e2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e32:	bf88      	it	hi
 8000e34:	17c8      	asrhi	r0, r1, #31
 8000e36:	bf38      	it	cc
 8000e38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e3c:	bf18      	it	ne
 8000e3e:	f040 0001 	orrne.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	d102      	bne.n	8000e50 <__cmpsf2+0x4c>
 8000e4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e4e:	d105      	bne.n	8000e5c <__cmpsf2+0x58>
 8000e50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e54:	d1e4      	bne.n	8000e20 <__cmpsf2+0x1c>
 8000e56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5a:	d0e1      	beq.n	8000e20 <__cmpsf2+0x1c>
 8000e5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_cfrcmple>:
 8000e64:	4684      	mov	ip, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	e7ff      	b.n	8000e6c <__aeabi_cfcmpeq>

08000e6c <__aeabi_cfcmpeq>:
 8000e6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e6e:	f7ff ffc9 	bl	8000e04 <__cmpsf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e7c <__aeabi_fcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cfcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffd2 	bl	8000e64 <__aeabi_cfrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc8 	bl	8000e64 <__aeabi_cfrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_f2iz>:
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ee8:	d30f      	bcc.n	8000f0a <__aeabi_f2iz+0x2a>
 8000eea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d90d      	bls.n	8000f10 <__aeabi_f2iz+0x30>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000efc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	bf18      	it	ne
 8000f06:	4240      	negne	r0, r0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2iz+0x3a>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d105      	bne.n	8000f26 <__aeabi_f2iz+0x46>
 8000f1a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 uint16_t AD_RES = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	817b      	strh	r3, [r7, #10]
	 uint32_t CH1_DC = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
	  HAL_Init();
 8000f3a:	f001 ff69 	bl	8002e10 <HAL_Init>
	  SystemClock_Config();
 8000f3e:	f000 f88f 	bl	8001060 <SystemClock_Config>
	  MX_GPIO_Init();
 8000f42:	f000 f9f5 	bl	8001330 <MX_GPIO_Init>
	  MX_ADC1_Init();
 8000f46:	f000 f8e7 	bl	8001118 <MX_ADC1_Init>
	  MX_TIM1_Init();
 8000f4a:	f000 f951 	bl	80011f0 <MX_TIM1_Init>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	483e      	ldr	r0, [pc, #248]	@ (800104c <main+0x120>)
 8000f52:	f004 f87d 	bl	8005050 <HAL_TIM_PWM_Start>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8000f56:	483e      	ldr	r0, [pc, #248]	@ (8001050 <main+0x124>)
 8000f58:	f002 fa4c 	bl	80033f4 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 ff58 	bl	8002e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f87e 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f9e4 	bl	8001330 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f68:	f000 f942 	bl	80011f0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f8d4 	bl	8001118 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000f70:	f000 f910 	bl	8001194 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000f74:	f000 faa4 	bl	80014c0 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)==0){// toggle
 8000f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f7c:	4835      	ldr	r0, [pc, #212]	@ (8001054 <main+0x128>)
 8000f7e:	f002 fd4f 	bl	8003a20 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10d      	bne.n	8000fa4 <main+0x78>
	 	  		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f8c:	4831      	ldr	r0, [pc, #196]	@ (8001054 <main+0x128>)
 8000f8e:	f002 fd76 	bl	8003a7e <HAL_GPIO_TogglePin>
	 	  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_7
 8000f92:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000f96:	4830      	ldr	r0, [pc, #192]	@ (8001058 <main+0x12c>)
 8000f98:	f002 fd71 	bl	8003a7e <HAL_GPIO_TogglePin>
	 	  		      			 |GPIO_PIN_8 |GPIO_PIN_9);
	 	  		HAL_Delay(250);
 8000f9c:	20fa      	movs	r0, #250	@ 0xfa
 8000f9e:	f001 ff99 	bl	8002ed4 <HAL_Delay>
 8000fa2:	e00b      	b.n	8000fbc <main+0x90>
	 	  }else {
	 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000faa:	482a      	ldr	r0, [pc, #168]	@ (8001054 <main+0x128>)
 8000fac:	f002 fd4f 	bl	8003a4e <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000fb6:	4828      	ldr	r0, [pc, #160]	@ (8001058 <main+0x12c>)
 8000fb8:	f002 fd49 	bl	8003a4e <HAL_GPIO_WritePin>
	 		      			 |GPIO_PIN_8 |GPIO_PIN_9,1);

	 	  }
	 	  	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)==0){// LIGA
 8000fbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc0:	4824      	ldr	r0, [pc, #144]	@ (8001054 <main+0x128>)
 8000fc2:	f002 fd2d 	bl	8003a20 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10e      	bne.n	8000fea <main+0xbe>
	 	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd2:	4820      	ldr	r0, [pc, #128]	@ (8001054 <main+0x128>)
 8000fd4:	f002 fd3b 	bl	8003a4e <HAL_GPIO_WritePin>
	 	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000fde:	481e      	ldr	r0, [pc, #120]	@ (8001058 <main+0x12c>)
 8000fe0:	f002 fd35 	bl	8003a4e <HAL_GPIO_WritePin>
	 	  			  			      			 |GPIO_PIN_8 |GPIO_PIN_9,0);
	 	  		  		HAL_Delay(250);
 8000fe4:	20fa      	movs	r0, #250	@ 0xfa
 8000fe6:	f001 ff75 	bl	8002ed4 <HAL_Delay>
	 	  		  }if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0){// LIGA buzzer{
 8000fea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fee:	481b      	ldr	r0, [pc, #108]	@ (800105c <main+0x130>)
 8000ff0:	f002 fd16 	bl	8003a20 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1be      	bne.n	8000f78 <main+0x4c>
	 	  			int x;
	 	  				for(x=0; x<65535; x=x+1000)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	e00a      	b.n	8001016 <main+0xea>
	 	  				{
	 	  				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, x);
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <main+0x120>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
	 	  				  HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	@ 0x32
 800100a:	f001 ff63 	bl	8002ed4 <HAL_Delay>
	 	  				for(x=0; x<65535; x=x+1000)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800101c:	4293      	cmp	r3, r2
 800101e:	ddef      	ble.n	8001000 <main+0xd4>
	 	  				}
	 	  				for(x=65535; x>0; x=x-1000)
 8001020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00c      	b.n	8001042 <main+0x116>
	 	  				{
	 	  				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, x);
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <main+0x120>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
	 	  				  HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f001 ff4f 	bl	8002ed4 <HAL_Delay>
	 	  				ssd1306_TestAll();
 8001036:	f001 fcff 	bl	8002a38 <ssd1306_TestAll>
	 	  				for(x=65535; x>0; x=x-1000)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dcef      	bgt.n	8001028 <main+0xfc>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)==0){// toggle
 8001048:	e796      	b.n	8000f78 <main+0x4c>
 800104a:	bf00      	nop
 800104c:	200000fc 	.word	0x200000fc
 8001050:	20000078 	.word	0x20000078
 8001054:	40011000 	.word	0x40011000
 8001058:	40010c00 	.word	0x40010c00
 800105c:	40010800 	.word	0x40010800

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	@ 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2228      	movs	r2, #40	@ 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fdbc 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	2301      	movs	r3, #1
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f9a6 	bl	8004408 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010c2:	f000 f9bf 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fc12 	bl	800490c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010ee:	f000 f9a9 	bl	8001444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f2:	2302      	movs	r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd92 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800110a:	f000 f99b 	bl	8001444 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_ADC1_Init+0x74>)
 800112a:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <MX_ADC1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_ADC1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_ADC1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_ADC1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_ADC1_Init+0x74>)
 8001142:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_ADC1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_ADC1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_ADC1_Init+0x74>)
 8001156:	f001 fee1 	bl	8002f1c <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 f970 	bl	8001444 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_ADC1_Init+0x74>)
 8001176:	f001 ffa9 	bl	80030cc <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001180:	f000 f960 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000078 	.word	0x20000078
 8001190:	40012400 	.word	0x40012400

08001194 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x50>)
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <MX_I2C2_Init+0x54>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_I2C2_Init+0x58>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011d2:	f002 fc6d 	bl	8003ab0 <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 f932 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000a8 	.word	0x200000a8
 80011e8:	40005800 	.word	0x40005800
 80011ec:	00061a80 	.word	0x00061a80

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	@ 0x58
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f004 fcdf 	bl	8005bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122e:	4b3e      	ldr	r3, [pc, #248]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001230:	4a3e      	ldr	r2, [pc, #248]	@ (800132c <MX_TIM1_Init+0x13c>)
 8001232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001234:	4b3c      	ldr	r3, [pc, #240]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <MX_TIM1_Init+0x138>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001240:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b37      	ldr	r3, [pc, #220]	@ (8001328 <MX_TIM1_Init+0x138>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124e:	4b36      	ldr	r3, [pc, #216]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b34      	ldr	r3, [pc, #208]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800125a:	4833      	ldr	r0, [pc, #204]	@ (8001328 <MX_TIM1_Init+0x138>)
 800125c:	f003 fe50 	bl	8004f00 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001266:	f000 f8ed 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001274:	4619      	mov	r1, r3
 8001276:	482c      	ldr	r0, [pc, #176]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001278:	f004 f84e 	bl	8005318 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001282:	f000 f8df 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001286:	4828      	ldr	r0, [pc, #160]	@ (8001328 <MX_TIM1_Init+0x138>)
 8001288:	f003 fe89 	bl	8004f9e <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001292:	f000 f8d7 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	@ (8001328 <MX_TIM1_Init+0x138>)
 80012a6:	f004 fba3 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012b0:	f000 f8c8 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	@ 0x60
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <MX_TIM1_Init+0x138>)
 80012da:	f003 ff5b 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012e4:	f000 f8ae 	bl	8001444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM1_Init+0x138>)
 800130c:	f004 fbce 	bl	8005aac <HAL_TIMEx_ConfigBreakDeadTime>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001316:	f000 f895 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM1_Init+0x138>)
 800131c:	f001 fcb6 	bl	8002c8c <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3758      	adds	r7, #88	@ 0x58
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000fc 	.word	0x200000fc
 800132c:	40012c00 	.word	0x40012c00

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a3a      	ldr	r2, [pc, #232]	@ (8001434 <MX_GPIO_Init+0x104>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <MX_GPIO_Init+0x104>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a34      	ldr	r2, [pc, #208]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <MX_GPIO_Init+0x104>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a2e      	ldr	r2, [pc, #184]	@ (8001434 <MX_GPIO_Init+0x104>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <MX_GPIO_Init+0x104>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <MX_GPIO_Init+0x104>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <MX_GPIO_Init+0x104>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013aa:	4823      	ldr	r0, [pc, #140]	@ (8001438 <MX_GPIO_Init+0x108>)
 80013ac:	f002 fb4f 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_Pin|D2_Pin|D3_Pin|GPIO_PIN_6
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 80013b6:	4821      	ldr	r0, [pc, #132]	@ (800143c <MX_GPIO_Init+0x10c>)
 80013b8:	f002 fb49 	bl	8003a4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4818      	ldr	r0, [pc, #96]	@ (8001438 <MX_GPIO_Init+0x108>)
 80013d6:	f002 f99f 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80013da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4812      	ldr	r0, [pc, #72]	@ (8001438 <MX_GPIO_Init+0x108>)
 80013f0:	f002 f992 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80013f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_GPIO_Init+0x110>)
 800140a:	f002 f985 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin PB6
                           PB7 D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|GPIO_PIN_6
 800140e:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001412:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_GPIO_Init+0x10c>)
 8001428:	f002 f976 	bl	8003718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40011000 	.word	0x40011000
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40010800 	.word	0x40010800

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2301      	movs	r3, #1
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	2200      	movs	r2, #0
 8001478:	2178      	movs	r1, #120	@ 0x78
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <ssd1306_WriteCommand+0x2c>)
 800147c:	f002 fc5c 	bl	8003d38 <HAL_I2C_Mem_Write>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000a8 	.word	0x200000a8

0800148c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af04      	add	r7, sp, #16
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	9202      	str	r2, [sp, #8]
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2301      	movs	r3, #1
 80014a8:	2240      	movs	r2, #64	@ 0x40
 80014aa:	2178      	movs	r1, #120	@ 0x78
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <ssd1306_WriteData+0x30>)
 80014ae:	f002 fc43 	bl	8003d38 <HAL_I2C_Mem_Write>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200000a8 	.word	0x200000a8

080014c0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80014c4:	f7ff ffc4 	bl	8001450 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80014c8:	2064      	movs	r0, #100	@ 0x64
 80014ca:	f001 fd03 	bl	8002ed4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 ff60 	bl	8002394 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014d4:	2020      	movs	r0, #32
 80014d6:	f7ff ffc1 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ffbe 	bl	800145c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014e0:	20b0      	movs	r0, #176	@ 0xb0
 80014e2:	f7ff ffbb 	bl	800145c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014e6:	20c8      	movs	r0, #200	@ 0xc8
 80014e8:	f7ff ffb8 	bl	800145c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff ffb5 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014f2:	2010      	movs	r0, #16
 80014f4:	f7ff ffb2 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014f8:	2040      	movs	r0, #64	@ 0x40
 80014fa:	f7ff ffaf 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014fe:	20ff      	movs	r0, #255	@ 0xff
 8001500:	f000 ff35 	bl	800236e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001504:	20a1      	movs	r0, #161	@ 0xa1
 8001506:	f7ff ffa9 	bl	800145c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800150a:	20a6      	movs	r0, #166	@ 0xa6
 800150c:	f7ff ffa6 	bl	800145c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001510:	20a8      	movs	r0, #168	@ 0xa8
 8001512:	f7ff ffa3 	bl	800145c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001516:	203f      	movs	r0, #63	@ 0x3f
 8001518:	f7ff ffa0 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800151c:	20a4      	movs	r0, #164	@ 0xa4
 800151e:	f7ff ff9d 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001522:	20d3      	movs	r0, #211	@ 0xd3
 8001524:	f7ff ff9a 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff97 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800152e:	20d5      	movs	r0, #213	@ 0xd5
 8001530:	f7ff ff94 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001534:	20f0      	movs	r0, #240	@ 0xf0
 8001536:	f7ff ff91 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800153a:	20d9      	movs	r0, #217	@ 0xd9
 800153c:	f7ff ff8e 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001540:	2022      	movs	r0, #34	@ 0x22
 8001542:	f7ff ff8b 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001546:	20da      	movs	r0, #218	@ 0xda
 8001548:	f7ff ff88 	bl	800145c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800154c:	2012      	movs	r0, #18
 800154e:	f7ff ff85 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001552:	20db      	movs	r0, #219	@ 0xdb
 8001554:	f7ff ff82 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001558:	2020      	movs	r0, #32
 800155a:	f7ff ff7f 	bl	800145c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800155e:	208d      	movs	r0, #141	@ 0x8d
 8001560:	f7ff ff7c 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001564:	2014      	movs	r0, #20
 8001566:	f7ff ff79 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800156a:	2001      	movs	r0, #1
 800156c:	f000 ff12 	bl	8002394 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f80f 	bl	8001594 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001576:	f000 f825 	bl	80015c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <ssd1306_Init+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <ssd1306_Init+0xd0>)
 8001582:	2200      	movs	r2, #0
 8001584:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001586:	4b02      	ldr	r3, [pc, #8]	@ (8001590 <ssd1306_Init+0xd0>)
 8001588:	2201      	movs	r2, #1
 800158a:	711a      	strb	r2, [r3, #4]
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000544 	.word	0x20000544

08001594 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <ssd1306_Fill+0x14>
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <ssd1306_Fill+0x16>
 80015a8:	23ff      	movs	r3, #255	@ 0xff
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	4619      	mov	r1, r3
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <ssd1306_Fill+0x2c>)
 80015b2:	f004 fb1b 	bl	8005bec <memset>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000144 	.word	0x20000144

080015c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e016      	b.n	80015fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	3b50      	subs	r3, #80	@ 0x50
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff40 	bl	800145c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff3d 	bl	800145c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015e2:	2010      	movs	r0, #16
 80015e4:	f7ff ff3a 	bl	800145c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <ssd1306_UpdateScreen+0x4c>)
 80015ee:	4413      	add	r3, r2
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff4a 	bl	800148c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	3301      	adds	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b07      	cmp	r3, #7
 8001602:	d9e5      	bls.n	80015d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000144 	.word	0x20000144

08001614 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	460b      	mov	r3, r1
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db3d      	blt.n	80016aa <ssd1306_DrawPixel+0x96>
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	2b3f      	cmp	r3, #63	@ 0x3f
 8001632:	d83a      	bhi.n	80016aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11a      	bne.n	8001670 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	4603      	mov	r3, r0
 8001644:	01db      	lsls	r3, r3, #7
 8001646:	4413      	add	r3, r2
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <ssd1306_DrawPixel+0xa0>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	b25a      	sxtb	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b259      	sxtb	r1, r3
 8001660:	79fa      	ldrb	r2, [r7, #7]
 8001662:	4603      	mov	r3, r0
 8001664:	01db      	lsls	r3, r3, #7
 8001666:	4413      	add	r3, r2
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <ssd1306_DrawPixel+0xa0>)
 800166c:	54d1      	strb	r1, [r2, r3]
 800166e:	e01d      	b.n	80016ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b2d8      	uxtb	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	01db      	lsls	r3, r3, #7
 800167c:	4413      	add	r3, r2
 800167e:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <ssd1306_DrawPixel+0xa0>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	b25a      	sxtb	r2, r3
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	b25b      	sxtb	r3, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4013      	ands	r3, r2
 8001698:	b259      	sxtb	r1, r3
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	4603      	mov	r3, r0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4413      	add	r3, r2
 80016a2:	b2c9      	uxtb	r1, r1
 80016a4:	4a03      	ldr	r2, [pc, #12]	@ (80016b4 <ssd1306_DrawPixel+0xa0>)
 80016a6:	54d1      	strb	r1, [r2, r3]
 80016a8:	e000      	b.n	80016ac <ssd1306_DrawPixel+0x98>
        return;
 80016aa:	bf00      	nop
    }
}
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000144 	.word	0x20000144

080016b8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4638      	mov	r0, r7
 80016c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80016c6:	4623      	mov	r3, r4
 80016c8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b1f      	cmp	r3, #31
 80016ce:	d902      	bls.n	80016d6 <ssd1306_WriteChar+0x1e>
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80016d4:	d901      	bls.n	80016da <ssd1306_WriteChar+0x22>
        return 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e077      	b.n	80017ca <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80016da:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	783b      	ldrb	r3, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	2b80      	cmp	r3, #128	@ 0x80
 80016e6:	dc06      	bgt.n	80016f6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80016e8:	4b3a      	ldr	r3, [pc, #232]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 80016ea:	885b      	ldrh	r3, [r3, #2]
 80016ec:	461a      	mov	r2, r3
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	dd01      	ble.n	80016fa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e067      	b.n	80017ca <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e04e      	b.n	800179e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3b20      	subs	r3, #32
 8001706:	7879      	ldrb	r1, [r7, #1]
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4619      	mov	r1, r3
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	440b      	add	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	e036      	b.n	800178e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b2d8      	uxtb	r0, r3
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 8001740:	885b      	ldrh	r3, [r3, #2]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff ff5f 	bl	8001614 <ssd1306_DrawPixel>
 8001756:	e017      	b.n	8001788 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b2d9      	uxtb	r1, r3
 8001774:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	f7ff ff46 	bl	8001614 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	3301      	adds	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	783b      	ldrb	r3, [r7, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4293      	cmp	r3, r2
 8001796:	d3c3      	bcc.n	8001720 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	787b      	ldrb	r3, [r7, #1]
 80017a0:	461a      	mov	r2, r3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d3ab      	bcc.n	8001700 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d005      	beq.n	80017be <ssd1306_WriteChar+0x106>
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	3a20      	subs	r2, #32
 80017b8:	440a      	add	r2, r1
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	e000      	b.n	80017c0 <ssd1306_WriteChar+0x108>
 80017be:	783a      	ldrb	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <ssd1306_WriteChar+0x11c>)
 80017c6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000544 	.word	0x20000544

080017d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4638      	mov	r0, r7
 80017e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80017e6:	e013      	b.n	8001810 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	7818      	ldrb	r0, [r3, #0]
 80017ec:	7e3b      	ldrb	r3, [r7, #24]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	463b      	mov	r3, r7
 80017f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f4:	f7ff ff60 	bl	80016b8 <ssd1306_WriteChar>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d002      	beq.n	800180a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	e008      	b.n	800181c <ssd1306_WriteString+0x44>
        }
        str++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e7      	bne.n	80017e8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <ssd1306_SetCursor+0x2c>)
 800183a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <ssd1306_SetCursor+0x2c>)
 8001842:	805a      	strh	r2, [r3, #2]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000544 	.word	0x20000544

08001854 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	4603      	mov	r3, r0
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	717b      	strb	r3, [r7, #5]
 800186e:	4613      	mov	r3, r2
 8001870:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001872:	797a      	ldrb	r2, [r7, #5]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	425b      	neglt	r3, r3
 800187e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001880:	793a      	ldrb	r2, [r7, #4]
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	bfb8      	it	lt
 800188a:	425b      	neglt	r3, r3
 800188c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	429a      	cmp	r2, r3
 8001894:	d201      	bcs.n	800189a <ssd1306_Line+0x46>
 8001896:	2301      	movs	r3, #1
 8001898:	e001      	b.n	800189e <ssd1306_Line+0x4a>
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80018a0:	79ba      	ldrb	r2, [r7, #6]
 80018a2:	793b      	ldrb	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d201      	bcs.n	80018ac <ssd1306_Line+0x58>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e001      	b.n	80018b0 <ssd1306_Line+0x5c>
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80018ba:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80018be:	7939      	ldrb	r1, [r7, #4]
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fea6 	bl	8001614 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80018c8:	e024      	b.n	8001914 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80018ca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80018ce:	79b9      	ldrb	r1, [r7, #6]
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe9e 	bl	8001614 <ssd1306_DrawPixel>
        error2 = error * 2;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	425b      	negs	r3, r3
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd08      	ble.n	80018fa <ssd1306_Line+0xa6>
            error -= deltaY;
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4413      	add	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	429a      	cmp	r2, r3
 8001900:	da08      	bge.n	8001914 <ssd1306_Line+0xc0>
            error += deltaX;
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	4413      	add	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	797b      	ldrb	r3, [r7, #5]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1d6      	bne.n	80018ca <ssd1306_Line+0x76>
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1d2      	bne.n	80018ca <ssd1306_Line+0x76>
        }
    }
    return;
 8001924:	bf00      	nop
}
 8001926:	3724      	adds	r7, #36	@ 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02a      	beq.n	8001998 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001942:	2301      	movs	r3, #1
 8001944:	81fb      	strh	r3, [r7, #14]
 8001946:	e022      	b.n	800198e <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800194e:	3b01      	subs	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	7818      	ldrb	r0, [r3, #0]
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800195e:	3b01      	subs	r3, #1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	7859      	ldrb	r1, [r3, #1]
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	781c      	ldrb	r4, [r3, #0]
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	785a      	ldrb	r2, [r3, #1]
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	4622      	mov	r2, r4
 8001984:	f7ff ff66 	bl	8001854 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	3301      	adds	r3, #1
 800198c:	81fb      	strh	r3, [r7, #14]
 800198e:	89fa      	ldrh	r2, [r7, #14]
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3d8      	bcc.n	8001948 <ssd1306_Polyline+0x1c>
    }

    return;
 8001996:	e000      	b.n	800199a <ssd1306_Polyline+0x6e>
        return;
 8001998:	bf00      	nop
}
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 80019a8:	4904      	ldr	r1, [pc, #16]	@ (80019bc <ssd1306_DegToRad+0x1c>)
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff f8d2 	bl	8000b54 <__aeabi_fmul>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	3c8ee7a7 	.word	0x3c8ee7a7

080019c0 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80019d0:	d802      	bhi.n	80019d8 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	81fb      	strh	r3, [r7, #14]
 80019d6:	e013      	b.n	8001a00 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	490b      	ldr	r1, [pc, #44]	@ (8001a0c <ssd1306_NormalizeTo0_360+0x4c>)
 80019de:	fba1 1202 	umull	r1, r2, r1, r2
 80019e2:	0892      	lsrs	r2, r2, #2
 80019e4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80019e8:	fb01 f202 	mul.w	r2, r1, r2
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <ssd1306_NormalizeTo0_360+0x3a>
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	e001      	b.n	80019fe <ssd1306_NormalizeTo0_360+0x3e>
 80019fa:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80019fe:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001a00:	89fb      	ldrh	r3, [r7, #14]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	16c16c17 	.word	0x16c16c17

08001a10 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08b      	sub	sp, #44	@ 0x2c
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	4603      	mov	r3, r0
 8001a24:	71bb      	strb	r3, [r7, #6]
 8001a26:	460b      	mov	r3, r1
 8001a28:	717b      	strb	r3, [r7, #5]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	807b      	strh	r3, [r7, #2]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001a2e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffc5 	bl	80019c0 <ssd1306_NormalizeTo0_360>
 8001a36:	4603      	mov	r3, r0
 8001a38:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffbf 	bl	80019c0 <ssd1306_NormalizeTo0_360>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <ssd1306_DrawArc+0x1b8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bcc <ssd1306_DrawArc+0x1bc>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	441a      	add	r2, r3
 8001a56:	1212      	asrs	r2, r2, #8
 8001a58:	17db      	asrs	r3, r3, #31
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <ssd1306_DrawArc+0x1b8>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	4a58      	ldr	r2, [pc, #352]	@ (8001bd0 <ssd1306_DrawArc+0x1c0>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff f814 	bl	8000aa4 <__aeabi_ui2f>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	6938      	ldr	r0, [r7, #16]
 8001a80:	f7ff f810 	bl	8000aa4 <__aeabi_ui2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff f917 	bl	8000cbc <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]
    while(count < approx_segments)
 8001a92:	e08f      	b.n	8001bb4 <ssd1306_DrawArc+0x1a4>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f7ff f805 	bl	8000aa4 <__aeabi_ui2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f858 	bl	8000b54 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff7a 	bl	80019a0 <ssd1306_DegToRad>
 8001aac:	61b8      	str	r0, [r7, #24]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001aae:	69b8      	ldr	r0, [r7, #24]
 8001ab0:	f004 fd4a 	bl	8006548 <sinf>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fff7 	bl	8000aac <__aeabi_i2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff f846 	bl	8000b54 <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fa08 	bl	8000ee0 <__aeabi_f2iz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4413      	add	r3, r2
 8001ada:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001adc:	69b8      	ldr	r0, [r7, #24]
 8001ade:	f004 fcfb 	bl	80064d8 <cosf>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	797b      	ldrb	r3, [r7, #5]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ffe0 	bl	8000aac <__aeabi_i2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_fmul>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f9f1 	bl	8000ee0 <__aeabi_f2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	4413      	add	r3, r2
 8001b08:	72bb      	strb	r3, [r7, #10]
        count++;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d00d      	beq.n	8001b34 <ssd1306_DrawArc+0x124>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001b18:	69f8      	ldr	r0, [r7, #28]
 8001b1a:	f7fe ffc3 	bl	8000aa4 <__aeabi_ui2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff38 	bl	80019a0 <ssd1306_DegToRad>
 8001b30:	61b8      	str	r0, [r7, #24]
 8001b32:	e007      	b.n	8001b44 <ssd1306_DrawArc+0x134>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7fe ffb5 	bl	8000aa4 <__aeabi_ui2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff2f 	bl	80019a0 <ssd1306_DegToRad>
 8001b42:	61b8      	str	r0, [r7, #24]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001b44:	69b8      	ldr	r0, [r7, #24]
 8001b46:	f004 fcff 	bl	8006548 <sinf>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	797b      	ldrb	r3, [r7, #5]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe ffac 	bl	8000aac <__aeabi_i2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7fe fffb 	bl	8000b54 <__aeabi_fmul>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f9bd 	bl	8000ee0 <__aeabi_f2iz>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4413      	add	r3, r2
 8001b70:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001b72:	69b8      	ldr	r0, [r7, #24]
 8001b74:	f004 fcb0 	bl	80064d8 <cosf>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	797b      	ldrb	r3, [r7, #5]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ff95 	bl	8000aac <__aeabi_i2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe ffe4 	bl	8000b54 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9a6 	bl	8000ee0 <__aeabi_f2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001ba0:	7a3c      	ldrb	r4, [r7, #8]
 8001ba2:	7a7a      	ldrb	r2, [r7, #9]
 8001ba4:	7ab9      	ldrb	r1, [r7, #10]
 8001ba6:	7af8      	ldrb	r0, [r7, #11]
 8001ba8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4623      	mov	r3, r4
 8001bb0:	f7ff fe50 	bl	8001854 <ssd1306_Line>
    while(count < approx_segments)
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f4ff af6b 	bcc.w	8001a94 <ssd1306_DrawArc+0x84>
    }
    
    return;
 8001bbe:	bf00      	nop
}
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	080071b6 	.word	0x080071b6
 8001bcc:	b60b60b7 	.word	0xb60b60b7
 8001bd0:	16c16c17 	.word	0x16c16c17

08001bd4 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08d      	sub	sp, #52	@ 0x34
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	4603      	mov	r3, r0
 8001be8:	71bb      	strb	r3, [r7, #6]
 8001bea:	460b      	mov	r3, r1
 8001bec:	717b      	strb	r3, [r7, #5]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	807b      	strh	r3, [r7, #2]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 8001bf2:	2324      	movs	r3, #36	@ 0x24
 8001bf4:	61bb      	str	r3, [r7, #24]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t yp1;
    uint8_t yp2 = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001c02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fedb 	bl	80019c0 <ssd1306_NormalizeTo0_360>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fed5 	bl	80019c0 <ssd1306_NormalizeTo0_360>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	4a86      	ldr	r2, [pc, #536]	@ (8001e3c <ssd1306_DrawArcWithRadiusLine+0x268>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <ssd1306_DrawArcWithRadiusLine+0x268>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7fe ff2f 	bl	8000aa4 <__aeabi_ui2f>
 8001c46:	4604      	mov	r4, r0
 8001c48:	6938      	ldr	r0, [r7, #16]
 8001c4a:	f7fe ff2b 	bl	8000aa4 <__aeabi_ui2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff f832 	bl	8000cbc <__aeabi_fdiv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001c5c:	6a38      	ldr	r0, [r7, #32]
 8001c5e:	f7fe ff21 	bl	8000aa4 <__aeabi_ui2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe ff74 	bl	8000b54 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe96 	bl	80019a0 <ssd1306_DegToRad>
 8001c74:	61f8      	str	r0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8001c76:	69f8      	ldr	r0, [r7, #28]
 8001c78:	f004 fc66 	bl	8006548 <sinf>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	797b      	ldrb	r3, [r7, #5]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe ff13 	bl	8000aac <__aeabi_i2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7fe ff62 	bl	8000b54 <__aeabi_fmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f924 	bl	8000ee0 <__aeabi_f2iz>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 8001ca4:	69f8      	ldr	r0, [r7, #28]
 8001ca6:	f004 fc17 	bl	80064d8 <cosf>
 8001caa:	4604      	mov	r4, r0
 8001cac:	797b      	ldrb	r3, [r7, #5]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fefc 	bl	8000aac <__aeabi_i2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7fe ff4b 	bl	8000b54 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f90d 	bl	8000ee0 <__aeabi_f2iz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	4413      	add	r3, r2
 8001cd0:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 8001cd2:	e093      	b.n	8001dfc <ssd1306_DrawArcWithRadiusLine+0x228>
        rad = ssd1306_DegToRad(count*approx_degree);
 8001cd4:	6a38      	ldr	r0, [r7, #32]
 8001cd6:	f7fe fee5 	bl	8000aa4 <__aeabi_ui2f>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff38 	bl	8000b54 <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe5a 	bl	80019a0 <ssd1306_DegToRad>
 8001cec:	61f8      	str	r0, [r7, #28]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001cee:	69f8      	ldr	r0, [r7, #28]
 8001cf0:	f004 fc2a 	bl	8006548 <sinf>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	797b      	ldrb	r3, [r7, #5]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fed7 	bl	8000aac <__aeabi_i2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7fe ff26 	bl	8000b54 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f8e8 	bl	8000ee0 <__aeabi_f2iz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4413      	add	r3, r2
 8001d1a:	727b      	strb	r3, [r7, #9]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001d1c:	69f8      	ldr	r0, [r7, #28]
 8001d1e:	f004 fbdb 	bl	80064d8 <cosf>
 8001d22:	4604      	mov	r4, r0
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fec0 	bl	8000aac <__aeabi_i2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7fe ff0f 	bl	8000b54 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8d1 	bl	8000ee0 <__aeabi_f2iz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	4413      	add	r3, r2
 8001d48:	723b      	strb	r3, [r7, #8]
        count++;
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d00d      	beq.n	8001d74 <ssd1306_DrawArcWithRadiusLine+0x1a0>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001d58:	6a38      	ldr	r0, [r7, #32]
 8001d5a:	f7fe fea3 	bl	8000aa4 <__aeabi_ui2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fef6 	bl	8000b54 <__aeabi_fmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fe18 	bl	80019a0 <ssd1306_DegToRad>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	e007      	b.n	8001d84 <ssd1306_DrawArcWithRadiusLine+0x1b0>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7fe fe95 	bl	8000aa4 <__aeabi_ui2f>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe0f 	bl	80019a0 <ssd1306_DegToRad>
 8001d82:	61f8      	str	r0, [r7, #28]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f004 fbdf 	bl	8006548 <sinf>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	797b      	ldrb	r3, [r7, #5]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fe8c 	bl	8000aac <__aeabi_i2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fedb 	bl	8000b54 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f89d 	bl	8000ee0 <__aeabi_f2iz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4413      	add	r3, r2
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001db4:	69f8      	ldr	r0, [r7, #28]
 8001db6:	f004 fb8f 	bl	80064d8 <cosf>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fe74 	bl	8000aac <__aeabi_i2f>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7fe fec3 	bl	8000b54 <__aeabi_fmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f885 	bl	8000ee0 <__aeabi_f2iz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	4413      	add	r3, r2
 8001de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001de4:	f897 4026 	ldrb.w	r4, [r7, #38]	@ 0x26
 8001de8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001dec:	7a39      	ldrb	r1, [r7, #8]
 8001dee:	7a78      	ldrb	r0, [r7, #9]
 8001df0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4623      	mov	r3, r4
 8001df8:	f7ff fd2c 	bl	8001854 <ssd1306_Line>
    while (count < approx_segments) {
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f4ff af67 	bcc.w	8001cd4 <ssd1306_DrawArcWithRadiusLine+0x100>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001e06:	7abc      	ldrb	r4, [r7, #10]
 8001e08:	7afa      	ldrb	r2, [r7, #11]
 8001e0a:	79b9      	ldrb	r1, [r7, #6]
 8001e0c:	79f8      	ldrb	r0, [r7, #7]
 8001e0e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7ff fd1d 	bl	8001854 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001e1a:	f897 4026 	ldrb.w	r4, [r7, #38]	@ 0x26
 8001e1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e22:	79b9      	ldrb	r1, [r7, #6]
 8001e24:	79f8      	ldrb	r0, [r7, #7]
 8001e26:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fd11 	bl	8001854 <ssd1306_Line>
    return;
 8001e32:	bf00      	nop
}
 8001e34:	372c      	adds	r7, #44	@ 0x2c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	16c16c17 	.word	0x16c16c17

08001e40 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	4603      	mov	r3, r0
 8001e54:	71bb      	strb	r3, [r7, #6]
 8001e56:	460b      	mov	r3, r1
 8001e58:	717b      	strb	r3, [r7, #5]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	425b      	negs	r3, r3
 8001e62:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001e68:	797b      	ldrb	r3, [r7, #5]
 8001e6a:	f1c3 0301 	rsb	r3, r3, #1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db65      	blt.n	8001f46 <ssd1306_DrawCircle+0x106>
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e7e:	d862      	bhi.n	8001f46 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	b2d8      	uxtb	r0, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	793a      	ldrb	r2, [r7, #4]
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7ff fbbc 	bl	8001614 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	4413      	add	r3, r2
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	793a      	ldrb	r2, [r7, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff fbae 	bl	8001614 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	79ba      	ldrb	r2, [r7, #6]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	793a      	ldrb	r2, [r7, #4]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7ff fba0 	bl	8001614 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	79ba      	ldrb	r2, [r7, #6]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	793a      	ldrb	r2, [r7, #4]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7ff fb92 	bl	8001614 <ssd1306_DrawPixel>
        e2 = err;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dc13      	bgt.n	8001f24 <ssd1306_DrawCircle+0xe4>
            y++;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	3301      	adds	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	3301      	adds	r3, #1
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	425b      	negs	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d105      	bne.n	8001f24 <ssd1306_DrawCircle+0xe4>
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dc01      	bgt.n	8001f24 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dd08      	ble.n	8001f3e <ssd1306_DrawCircle+0xfe>
            x++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	3301      	adds	r3, #1
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dd9d      	ble.n	8001e80 <ssd1306_DrawCircle+0x40>

    return;
 8001f44:	e000      	b.n	8001f48 <ssd1306_DrawCircle+0x108>
        return;
 8001f46:	bf00      	nop
}
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}

08001f4e <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b089      	sub	sp, #36	@ 0x24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4604      	mov	r4, r0
 8001f56:	4608      	mov	r0, r1
 8001f58:	4611      	mov	r1, r2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4603      	mov	r3, r0
 8001f62:	71bb      	strb	r3, [r7, #6]
 8001f64:	460b      	mov	r3, r1
 8001f66:	717b      	strb	r3, [r7, #5]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001f6c:	797b      	ldrb	r3, [r7, #5]
 8001f6e:	425b      	negs	r3, r3
 8001f70:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001f76:	797b      	ldrb	r3, [r7, #5]
 8001f78:	f1c3 0301 	rsb	r3, r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db51      	blt.n	800202c <ssd1306_FillCircle+0xde>
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f8c:	d84e      	bhi.n	800202c <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	79bb      	ldrb	r3, [r7, #6]
 8001f94:	4413      	add	r3, r2
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e017      	b.n	8001fca <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	73bb      	strb	r3, [r7, #14]
 8001fa4:	e008      	b.n	8001fb8 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001fa6:	793a      	ldrb	r2, [r7, #4]
 8001fa8:	7bf9      	ldrb	r1, [r7, #15]
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fb31 	bl	8001614 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001fb2:	7bbb      	ldrb	r3, [r7, #14]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	73bb      	strb	r3, [r7, #14]
 8001fb8:	7bba      	ldrb	r2, [r7, #14]
 8001fba:	79f9      	ldrb	r1, [r7, #7]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	440b      	add	r3, r1
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	daf0      	bge.n	8001fa6 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	79b9      	ldrb	r1, [r7, #6]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1acb      	subs	r3, r1, r3
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dae1      	bge.n	8001f9a <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dc13      	bgt.n	800200a <ssd1306_FillCircle+0xbc>
            y++;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	3301      	adds	r3, #1
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d105      	bne.n	800200a <ssd1306_FillCircle+0xbc>
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	429a      	cmp	r2, r3
 8002004:	dc01      	bgt.n	800200a <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	429a      	cmp	r2, r3
 8002010:	dd08      	ble.n	8002024 <ssd1306_FillCircle+0xd6>
            x++;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3301      	adds	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	3301      	adds	r3, #1
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4413      	add	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	ddb1      	ble.n	8001f8e <ssd1306_FillCircle+0x40>

    return;
 800202a:	e000      	b.n	800202e <ssd1306_FillCircle+0xe0>
        return;
 800202c:	bf00      	nop
}
 800202e:	3724      	adds	r7, #36	@ 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	af02      	add	r7, sp, #8
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	4603      	mov	r3, r0
 8002048:	71bb      	strb	r3, [r7, #6]
 800204a:	460b      	mov	r3, r1
 800204c:	717b      	strb	r3, [r7, #5]
 800204e:	4613      	mov	r3, r2
 8002050:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002052:	79bc      	ldrb	r4, [r7, #6]
 8002054:	797a      	ldrb	r2, [r7, #5]
 8002056:	79b9      	ldrb	r1, [r7, #6]
 8002058:	79f8      	ldrb	r0, [r7, #7]
 800205a:	7e3b      	ldrb	r3, [r7, #24]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4623      	mov	r3, r4
 8002060:	f7ff fbf8 	bl	8001854 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002064:	793c      	ldrb	r4, [r7, #4]
 8002066:	797a      	ldrb	r2, [r7, #5]
 8002068:	79b9      	ldrb	r1, [r7, #6]
 800206a:	7978      	ldrb	r0, [r7, #5]
 800206c:	7e3b      	ldrb	r3, [r7, #24]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4623      	mov	r3, r4
 8002072:	f7ff fbef 	bl	8001854 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002076:	793c      	ldrb	r4, [r7, #4]
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	7939      	ldrb	r1, [r7, #4]
 800207c:	7978      	ldrb	r0, [r7, #5]
 800207e:	7e3b      	ldrb	r3, [r7, #24]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4623      	mov	r3, r4
 8002084:	f7ff fbe6 	bl	8001854 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002088:	79bc      	ldrb	r4, [r7, #6]
 800208a:	79fa      	ldrb	r2, [r7, #7]
 800208c:	7939      	ldrb	r1, [r7, #4]
 800208e:	79f8      	ldrb	r0, [r7, #7]
 8002090:	7e3b      	ldrb	r3, [r7, #24]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4623      	mov	r3, r4
 8002096:	f7ff fbdd 	bl	8001854 <ssd1306_Line>

    return;
 800209a:	bf00      	nop
}
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}

080020a2 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4604      	mov	r4, r0
 80020aa:	4608      	mov	r0, r1
 80020ac:	4611      	mov	r1, r2
 80020ae:	461a      	mov	r2, r3
 80020b0:	4623      	mov	r3, r4
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	4603      	mov	r3, r0
 80020b6:	71bb      	strb	r3, [r7, #6]
 80020b8:	460b      	mov	r3, r1
 80020ba:	717b      	strb	r3, [r7, #5]
 80020bc:	4613      	mov	r3, r2
 80020be:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	797b      	ldrb	r3, [r7, #5]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bf28      	it	cs
 80020c8:	4613      	movcs	r3, r2
 80020ca:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80020cc:	797a      	ldrb	r2, [r7, #5]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf38      	it	cc
 80020d4:	4613      	movcc	r3, r2
 80020d6:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80020d8:	79ba      	ldrb	r2, [r7, #6]
 80020da:	793b      	ldrb	r3, [r7, #4]
 80020dc:	4293      	cmp	r3, r2
 80020de:	bf28      	it	cs
 80020e0:	4613      	movcs	r3, r2
 80020e2:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80020e4:	793a      	ldrb	r2, [r7, #4]
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	4293      	cmp	r3, r2
 80020ea:	bf38      	it	cc
 80020ec:	4613      	movcc	r3, r2
 80020ee:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e017      	b.n	8002126 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	73bb      	strb	r3, [r7, #14]
 80020fa:	e009      	b.n	8002110 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80020fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002100:	7bf9      	ldrb	r1, [r7, #15]
 8002102:	7bbb      	ldrb	r3, [r7, #14]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fa85 	bl	8001614 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	3301      	adds	r3, #1
 800210e:	73bb      	strb	r3, [r7, #14]
 8002110:	7bba      	ldrb	r2, [r7, #14]
 8002112:	7b3b      	ldrb	r3, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d803      	bhi.n	8002120 <ssd1306_FillRectangle+0x7e>
 8002118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800211c:	2b00      	cmp	r3, #0
 800211e:	daed      	bge.n	80020fc <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	7abb      	ldrb	r3, [r7, #10]
 800212a:	429a      	cmp	r2, r3
 800212c:	d803      	bhi.n	8002136 <ssd1306_FillRectangle+0x94>
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b3f      	cmp	r3, #63	@ 0x3f
 8002132:	d9e0      	bls.n	80020f6 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002134:	bf00      	nop
 8002136:	bf00      	nop
}
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
	...

08002140 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8002140:	b490      	push	{r4, r7}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4603      	mov	r3, r0
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	460b      	mov	r3, r1
 8002158:	717b      	strb	r3, [r7, #5]
 800215a:	4613      	mov	r3, r2
 800215c:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 800215e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db02      	blt.n	800216c <ssd1306_InvertRectangle+0x2c>
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	2b3f      	cmp	r3, #63	@ 0x3f
 800216a:	d901      	bls.n	8002170 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 800216c:	2301      	movs	r3, #1
 800216e:	e09c      	b.n	80022aa <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8002170:	79fa      	ldrb	r2, [r7, #7]
 8002172:	797b      	ldrb	r3, [r7, #5]
 8002174:	429a      	cmp	r2, r3
 8002176:	d803      	bhi.n	8002180 <ssd1306_InvertRectangle+0x40>
 8002178:	79ba      	ldrb	r2, [r7, #6]
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d901      	bls.n	8002184 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8002180:	2301      	movs	r3, #1
 8002182:	e092      	b.n	80022aa <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8002184:	79bb      	ldrb	r3, [r7, #6]
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	b2da      	uxtb	r2, r3
 800218a:	793b      	ldrb	r3, [r7, #4]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	429a      	cmp	r2, r3
 8002192:	d057      	beq.n	8002244 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e04f      	b.n	800223a <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	461a      	mov	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 80021aa:	4a42      	ldr	r2, [pc, #264]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b25a      	sxtb	r2, r3
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	21ff      	movs	r1, #255	@ 0xff
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	4053      	eors	r3, r2
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	b2d9      	uxtb	r1, r3
 80021c8:	4a3a      	ldr	r2, [pc, #232]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4413      	add	r3, r2
 80021ce:	460a      	mov	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3380      	adds	r3, #128	@ 0x80
 80021d6:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 80021d8:	e00d      	b.n	80021f6 <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 80021da:	4a36      	ldr	r2, [pc, #216]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	4a33      	ldr	r2, [pc, #204]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4413      	add	r3, r2
 80021ec:	460a      	mov	r2, r1
 80021ee:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3380      	adds	r3, #128	@ 0x80
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	793b      	ldrb	r3, [r7, #4]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	01db      	lsls	r3, r3, #7
 80021fe:	461a      	mov	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3e7      	bcc.n	80021da <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 800220a:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b25a      	sxtb	r2, r3
 8002214:	793b      	ldrb	r3, [r7, #4]
 8002216:	43db      	mvns	r3, r3
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	21ff      	movs	r1, #255	@ 0xff
 800221e:	fa41 f303 	asr.w	r3, r1, r3
 8002222:	b25b      	sxtb	r3, r3
 8002224:	4053      	eors	r3, r2
 8002226:	b25b      	sxtb	r3, r3
 8002228:	b2d9      	uxtb	r1, r3
 800222a:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4413      	add	r3, r2
 8002230:	460a      	mov	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	3301      	adds	r3, #1
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	797b      	ldrb	r3, [r7, #5]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	429a      	cmp	r2, r3
 8002240:	d9ab      	bls.n	800219a <ssd1306_InvertRectangle+0x5a>
 8002242:	e031      	b.n	80022a8 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	22ff      	movs	r2, #255	@ 0xff
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	b25a      	sxtb	r2, r3
 8002252:	793b      	ldrb	r3, [r7, #4]
 8002254:	43db      	mvns	r3, r3
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	21ff      	movs	r1, #255	@ 0xff
 800225c:	fa41 f303 	asr.w	r3, r1, r3
 8002260:	b25b      	sxtb	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	b25b      	sxtb	r3, r3
 8002266:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	01db      	lsls	r3, r3, #7
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e00e      	b.n	8002296 <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8002278:	4a0e      	ldr	r2, [pc, #56]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4413      	add	r3, r2
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4053      	eors	r3, r2
 8002284:	b2d9      	uxtb	r1, r3
 8002286:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <ssd1306_InvertRectangle+0x174>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4413      	add	r3, r2
 800228c:	460a      	mov	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	797b      	ldrb	r3, [r7, #5]
 8002298:	793a      	ldrb	r2, [r7, #4]
 800229a:	08d2      	lsrs	r2, r2, #3
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	01d2      	lsls	r2, r2, #7
 80022a0:	4413      	add	r3, r2
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d9e7      	bls.n	8002278 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc90      	pop	{r4, r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000144 	.word	0x20000144

080022b8 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	603a      	str	r2, [r7, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	460b      	mov	r3, r1
 80022c8:	71bb      	strb	r3, [r7, #6]
 80022ca:	4613      	mov	r3, r2
 80022cc:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80022ce:	797b      	ldrb	r3, [r7, #5]
 80022d0:	3307      	adds	r3, #7
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da00      	bge.n	80022d8 <ssd1306_DrawBitmap+0x20>
 80022d6:	3307      	adds	r3, #7
 80022d8:	10db      	asrs	r3, r3, #3
 80022da:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db3e      	blt.n	8002366 <ssd1306_DrawBitmap+0xae>
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ec:	d83b      	bhi.n	8002366 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	73bb      	strb	r3, [r7, #14]
 80022f2:	e033      	b.n	800235c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	737b      	strb	r3, [r7, #13]
 80022f8:	e026      	b.n	8002348 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e00d      	b.n	8002328 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	7b7a      	ldrb	r2, [r7, #13]
 8002318:	08d2      	lsrs	r2, r2, #3
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	4413      	add	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	da08      	bge.n	8002342 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002330:	79fa      	ldrb	r2, [r7, #7]
 8002332:	7b7b      	ldrb	r3, [r7, #13]
 8002334:	4413      	add	r3, r2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	7f3a      	ldrb	r2, [r7, #28]
 800233a:	79b9      	ldrb	r1, [r7, #6]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f969 	bl	8001614 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002342:	7b7b      	ldrb	r3, [r7, #13]
 8002344:	3301      	adds	r3, #1
 8002346:	737b      	strb	r3, [r7, #13]
 8002348:	7b7a      	ldrb	r2, [r7, #13]
 800234a:	797b      	ldrb	r3, [r7, #5]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3d4      	bcc.n	80022fa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	3301      	adds	r3, #1
 8002354:	73bb      	strb	r3, [r7, #14]
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	3301      	adds	r3, #1
 800235a:	71bb      	strb	r3, [r7, #6]
 800235c:	7bba      	ldrb	r2, [r7, #14]
 800235e:	7e3b      	ldrb	r3, [r7, #24]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3c7      	bcc.n	80022f4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002364:	e000      	b.n	8002368 <ssd1306_DrawBitmap+0xb0>
        return;
 8002366:	bf00      	nop
}
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002378:	2381      	movs	r3, #129	@ 0x81
 800237a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f86c 	bl	800145c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f868 	bl	800145c <ssd1306_WriteCommand>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80023a4:	23af      	movs	r3, #175	@ 0xaf
 80023a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <ssd1306_SetDisplayOn+0x38>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	715a      	strb	r2, [r3, #5]
 80023ae:	e004      	b.n	80023ba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80023b0:	23ae      	movs	r3, #174	@ 0xae
 80023b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <ssd1306_SetDisplayOn+0x38>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f84d 	bl	800145c <ssd1306_WriteCommand>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000544 	.word	0x20000544

080023d0 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff f8dc 	bl	8001594 <ssd1306_Fill>
   
    uint8_t x = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80023e4:	79b9      	ldrb	r1, [r7, #6]
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2200      	movs	r2, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f912 	bl	8001614 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <ssd1306_TestBorder+0x34>
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80023fa:	d803      	bhi.n	8002404 <ssd1306_TestBorder+0x34>
            x++;
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	3301      	adds	r3, #1
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	e016      	b.n	8002432 <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	2b7f      	cmp	r3, #127	@ 0x7f
 8002408:	d106      	bne.n	8002418 <ssd1306_TestBorder+0x48>
 800240a:	79bb      	ldrb	r3, [r7, #6]
 800240c:	2b3e      	cmp	r3, #62	@ 0x3e
 800240e:	d803      	bhi.n	8002418 <ssd1306_TestBorder+0x48>
            y++;
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	3301      	adds	r3, #1
 8002414:	71bb      	strb	r3, [r7, #6]
 8002416:	e00c      	b.n	8002432 <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	2b3f      	cmp	r3, #63	@ 0x3f
 800241c:	d106      	bne.n	800242c <ssd1306_TestBorder+0x5c>
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <ssd1306_TestBorder+0x5c>
            x--;
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	3b01      	subs	r3, #1
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	e002      	b.n	8002432 <ssd1306_TestBorder+0x62>
        else
            y--;
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	3b01      	subs	r3, #1
 8002430:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8002432:	79b9      	ldrb	r1, [r7, #6]
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2201      	movs	r2, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f8eb 	bl	8001614 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800243e:	f7ff f8c1 	bl	80015c4 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8002442:	2005      	movs	r0, #5
 8002444:	f000 fd46 	bl	8002ed4 <HAL_Delay>
    } while(x > 0 || y > 0);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ca      	bne.n	80023e4 <ssd1306_TestBorder+0x14>
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c7      	bne.n	80023e4 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8002454:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002458:	f000 fd3c 	bl	8002ed4 <HAL_Delay>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff f890 	bl	8001594 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4619      	mov	r1, r3
 8002478:	2002      	movs	r0, #2
 800247a:	f7ff f9d3 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <ssd1306_TestFonts1+0x90>)
 8002480:	2201      	movs	r2, #1
 8002482:	9200      	str	r2, [sp, #0]
 8002484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002486:	481c      	ldr	r0, [pc, #112]	@ (80024f8 <ssd1306_TestFonts1+0x94>)
 8002488:	f7ff f9a6 	bl	80017d8 <ssd1306_WriteString>
    y += 26;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	331a      	adds	r3, #26
 8002490:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4619      	mov	r1, r3
 8002496:	2002      	movs	r0, #2
 8002498:	f7ff f9c4 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 800249c:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <ssd1306_TestFonts1+0x98>)
 800249e:	2201      	movs	r2, #1
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a4:	4816      	ldr	r0, [pc, #88]	@ (8002500 <ssd1306_TestFonts1+0x9c>)
 80024a6:	f7ff f997 	bl	80017d8 <ssd1306_WriteString>
    y += 18;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	3312      	adds	r3, #18
 80024ae:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff f9b5 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <ssd1306_TestFonts1+0xa0>)
 80024bc:	2201      	movs	r2, #1
 80024be:	9200      	str	r2, [sp, #0]
 80024c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c2:	4811      	ldr	r0, [pc, #68]	@ (8002508 <ssd1306_TestFonts1+0xa4>)
 80024c4:	f7ff f988 	bl	80017d8 <ssd1306_WriteString>
    y += 10;
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	330a      	adds	r3, #10
 80024cc:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4619      	mov	r1, r3
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7ff f9a6 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <ssd1306_TestFonts1+0xa8>)
 80024da:	2201      	movs	r2, #1
 80024dc:	9200      	str	r2, [sp, #0]
 80024de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e0:	480b      	ldr	r0, [pc, #44]	@ (8002510 <ssd1306_TestFonts1+0xac>)
 80024e2:	f7ff f979 	bl	80017d8 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 80024e6:	f7ff f86d 	bl	80015c4 <ssd1306_UpdateScreen>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	0800bd34 	.word	0x0800bd34
 80024f8:	080070f0 	.word	0x080070f0
 80024fc:	0800bd28 	.word	0x0800bd28
 8002500:	080070fc 	.word	0x080070fc
 8002504:	0800bd1c 	.word	0x0800bd1c
 8002508:	08007108 	.word	0x08007108
 800250c:	0800bd10 	.word	0x0800bd10
 8002510:	08007114 	.word	0x08007114

08002514 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff f83a 	bl	8001594 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002520:	2104      	movs	r1, #4
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff f97e 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <ssd1306_TestFonts2+0x68>)
 800252a:	2201      	movs	r2, #1
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002530:	4813      	ldr	r0, [pc, #76]	@ (8002580 <ssd1306_TestFonts2+0x6c>)
 8002532:	f7ff f951 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8002536:	2124      	movs	r1, #36	@ 0x24
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff f973 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <ssd1306_TestFonts2+0x68>)
 8002540:	2201      	movs	r2, #1
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002546:	480f      	ldr	r0, [pc, #60]	@ (8002584 <ssd1306_TestFonts2+0x70>)
 8002548:	f7ff f946 	bl	80017d8 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 800254c:	2360      	movs	r3, #96	@ 0x60
 800254e:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002550:	233c      	movs	r3, #60	@ 0x3c
 8002552:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	3310      	adds	r3, #16
 8002558:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	3302      	adds	r3, #2
 800255e:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002560:	793b      	ldrb	r3, [r7, #4]
 8002562:	797a      	ldrb	r2, [r7, #5]
 8002564:	79b9      	ldrb	r1, [r7, #6]
 8002566:	79f8      	ldrb	r0, [r7, #7]
 8002568:	2401      	movs	r4, #1
 800256a:	9400      	str	r4, [sp, #0]
 800256c:	f7ff fd99 	bl	80020a2 <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002570:	f7ff f828 	bl	80015c4 <ssd1306_UpdateScreen>
#endif
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	0800bd40 	.word	0x0800bd40
 8002580:	08007120 	.word	0x08007120
 8002584:	0800712c 	.word	0x0800712c

08002588 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800258e:	2000      	movs	r0, #0
 8002590:	f7ff f800 	bl	8001594 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 8002594:	2104      	movs	r1, #4
 8002596:	2004      	movs	r0, #4
 8002598:	f7ff f944 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 800259c:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <ssd1306_TestFonts3+0x58>)
 800259e:	2201      	movs	r2, #1
 80025a0:	9200      	str	r2, [sp, #0]
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	480f      	ldr	r0, [pc, #60]	@ (80025e4 <ssd1306_TestFonts3+0x5c>)
 80025a6:	f7ff f917 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 80025aa:	2118      	movs	r1, #24
 80025ac:	2004      	movs	r0, #4
 80025ae:	f7ff f939 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <ssd1306_TestFonts3+0x58>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	9200      	str	r2, [sp, #0]
 80025b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <ssd1306_TestFonts3+0x60>)
 80025bc:	f7ff f90c 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 80025c0:	212c      	movs	r1, #44	@ 0x2c
 80025c2:	2004      	movs	r0, #4
 80025c4:	f7ff f92e 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <ssd1306_TestFonts3+0x58>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	9200      	str	r2, [sp, #0]
 80025ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d0:	4806      	ldr	r0, [pc, #24]	@ (80025ec <ssd1306_TestFonts3+0x64>)
 80025d2:	f7ff f901 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 80025d6:	f7fe fff5 	bl	80015c4 <ssd1306_UpdateScreen>
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	0800bd4c 	.word	0x0800bd4c
 80025e4:	08007138 	.word	0x08007138
 80025e8:	08007148 	.word	0x08007148
 80025ec:	08007158 	.word	0x08007158

080025f0 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b09a      	sub	sp, #104	@ 0x68
 80025f4:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe ffcc 	bl	8001594 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80025fc:	f000 fc60 	bl	8002ec0 <HAL_GetTick>
 8002600:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8002602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 800260a:	4a44      	ldr	r2, [pc, #272]	@ (800271c <ssd1306_TestFPS+0x12c>)
 800260c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002610:	ca07      	ldmia	r2, {r0, r1, r2}
 8002612:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002616:	2100      	movs	r1, #0
 8002618:	2002      	movs	r0, #2
 800261a:	f7ff f903 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 800261e:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <ssd1306_TestFPS+0x130>)
 8002620:	2200      	movs	r2, #0
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002626:	483f      	ldr	r0, [pc, #252]	@ (8002724 <ssd1306_TestFPS+0x134>)
 8002628:	f7ff f8d6 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 800262c:	2124      	movs	r1, #36	@ 0x24
 800262e:	2002      	movs	r0, #2
 8002630:	f7ff f8f8 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <ssd1306_TestFPS+0x130>)
 8002636:	2200      	movs	r2, #0
 8002638:	9200      	str	r2, [sp, #0]
 800263a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263c:	483a      	ldr	r0, [pc, #232]	@ (8002728 <ssd1306_TestFPS+0x138>)
 800263e:	f7ff f8cb 	bl	80017d8 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002642:	2112      	movs	r1, #18
 8002644:	2002      	movs	r0, #2
 8002646:	f7ff f8ed 	bl	8001824 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 800264a:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <ssd1306_TestFPS+0x130>)
 800264c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002650:	2200      	movs	r2, #0
 8002652:	9200      	str	r2, [sp, #0]
 8002654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002656:	f7ff f8bf 	bl	80017d8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800265a:	f7fe ffb3 	bl	80015c4 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 800265e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002662:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002666:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800266a:	3301      	adds	r3, #1
 800266c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002670:	220a      	movs	r2, #10
 8002672:	4619      	mov	r1, r3
 8002674:	f003 faa0 	bl	8005bb8 <memmove>
        message[sizeof(message)-2] = ch;
 8002678:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800267c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8002680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002682:	3301      	adds	r3, #1
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 8002686:	f000 fc1b 	bl	8002ec0 <HAL_GetTick>
 800268a:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 800268c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800268e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002696:	4293      	cmp	r3, r2
 8002698:	d9d3      	bls.n	8002642 <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 800269a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800269e:	f000 fc19 	bl	8002ed4 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80026a2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80026a4:	f7fe fa02 	bl	8000aac <__aeabi_i2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd feb2 	bl	8000414 <__aeabi_f2d>
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fe88 	bl	80003d0 <__aeabi_ui2d>
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <ssd1306_TestFPS+0x13c>)
 80026c6:	f7fe f827 	bl	8000718 <__aeabi_ddiv>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fe f821 	bl	8000718 <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe f903 	bl	80008e8 <__aeabi_d2iz>
 80026e2:	4603      	mov	r3, r0
 80026e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80026e6:	1d38      	adds	r0, r7, #4
 80026e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <ssd1306_TestFPS+0x140>)
 80026ec:	2140      	movs	r1, #64	@ 0x40
 80026ee:	f003 fa2f 	bl	8005b50 <sniprintf>
   
    ssd1306_Fill(White);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe ff4e 	bl	8001594 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80026f8:	2102      	movs	r1, #2
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7ff f892 	bl	8001824 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8002700:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <ssd1306_TestFPS+0x130>)
 8002702:	1d38      	adds	r0, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	9200      	str	r2, [sp, #0]
 8002708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270a:	f7ff f865 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800270e:	f7fe ff59 	bl	80015c4 <ssd1306_UpdateScreen>
}
 8002712:	bf00      	nop
 8002714:	3760      	adds	r7, #96	@ 0x60
 8002716:	46bd      	mov	sp, r7
 8002718:	bdb0      	pop	{r4, r5, r7, pc}
 800271a:	bf00      	nop
 800271c:	08007188 	.word	0x08007188
 8002720:	0800bd28 	.word	0x0800bd28
 8002724:	08007168 	.word	0x08007168
 8002728:	08007174 	.word	0x08007174
 800272c:	408f4000 	.word	0x408f4000
 8002730:	08007180 	.word	0x08007180

08002734 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 800273a:	2301      	movs	r3, #1
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	233f      	movs	r3, #63	@ 0x3f
 8002740:	227f      	movs	r2, #127	@ 0x7f
 8002742:	2101      	movs	r1, #1
 8002744:	2001      	movs	r0, #1
 8002746:	f7ff f885 	bl	8001854 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 800274a:	2301      	movs	r3, #1
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	233f      	movs	r3, #63	@ 0x3f
 8002750:	2201      	movs	r2, #1
 8002752:	2101      	movs	r1, #1
 8002754:	207f      	movs	r0, #127	@ 0x7f
 8002756:	f7ff f87d 	bl	8001854 <ssd1306_Line>
  ssd1306_UpdateScreen();
 800275a:	f7fe ff33 	bl	80015c4 <ssd1306_UpdateScreen>
  return;
 800275e:	bf00      	nop
}
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	e028      	b.n	80027c2 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4413      	add	r3, r2
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	b2d8      	uxtb	r0, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4413      	add	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	b2d9      	uxtb	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4413      	add	r3, r2
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461c      	mov	r4, r3
 80027a8:	00a4      	lsls	r4, r4, #2
 80027aa:	4423      	add	r3, r4
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2401      	movs	r4, #1
 80027b6:	9400      	str	r4, [sp, #0]
 80027b8:	f7ff fc3c 	bl	8002034 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3301      	adds	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d9d3      	bls.n	8002770 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80027c8:	f7fe fefc 	bl	80015c4 <ssd1306_UpdateScreen>
  return;
 80027cc:	bf00      	nop
}
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}

080027d4 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80027da:	2301      	movs	r3, #1
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2323      	movs	r3, #35	@ 0x23
 80027e0:	2241      	movs	r2, #65	@ 0x41
 80027e2:	2101      	movs	r1, #1
 80027e4:	201f      	movs	r0, #31
 80027e6:	f7ff fc5c 	bl	80020a2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	233c      	movs	r3, #60	@ 0x3c
 80027f0:	2246      	movs	r2, #70	@ 0x46
 80027f2:	212d      	movs	r1, #45	@ 0x2d
 80027f4:	200a      	movs	r0, #10
 80027f6:	f7ff fc54 	bl	80020a2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80027fa:	2301      	movs	r3, #1
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	232d      	movs	r3, #45	@ 0x2d
 8002800:	2264      	movs	r2, #100	@ 0x64
 8002802:	210a      	movs	r1, #10
 8002804:	204b      	movs	r0, #75	@ 0x4b
 8002806:	f7ff fc4c 	bl	80020a2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2337      	movs	r3, #55	@ 0x37
 8002810:	2250      	movs	r2, #80	@ 0x50
 8002812:	211e      	movs	r1, #30
 8002814:	2037      	movs	r0, #55	@ 0x37
 8002816:	f7ff fc44 	bl	80020a2 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 800281a:	f7fe fed3 	bl	80015c4 <ssd1306_UpdateScreen>
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 800282a:	2100      	movs	r1, #0
 800282c:	2002      	movs	r0, #2
 800282e:	f7fe fff9 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002832:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 8002834:	2201      	movs	r2, #1
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	4826      	ldr	r0, [pc, #152]	@ (80028d4 <ssd1306_TestRectangleInvert+0xb0>)
 800283c:	f7fe ffcc 	bl	80017d8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8002840:	2114      	movs	r1, #20
 8002842:	2002      	movs	r0, #2
 8002844:	f7fe ffee 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 800284a:	2201      	movs	r2, #1
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	4821      	ldr	r0, [pc, #132]	@ (80028d8 <ssd1306_TestRectangleInvert+0xb4>)
 8002852:	f7fe ffc1 	bl	80017d8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002856:	2128      	movs	r1, #40	@ 0x28
 8002858:	2002      	movs	r0, #2
 800285a:	f7fe ffe3 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 8002860:	2201      	movs	r2, #1
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002866:	481d      	ldr	r0, [pc, #116]	@ (80028dc <ssd1306_TestRectangleInvert+0xb8>)
 8002868:	f7fe ffb6 	bl	80017d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 800286c:	2100      	movs	r1, #0
 800286e:	2042      	movs	r0, #66	@ 0x42
 8002870:	f7fe ffd8 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 8002876:	2201      	movs	r2, #1
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	4817      	ldr	r0, [pc, #92]	@ (80028dc <ssd1306_TestRectangleInvert+0xb8>)
 800287e:	f7fe ffab 	bl	80017d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 8002882:	2114      	movs	r1, #20
 8002884:	2042      	movs	r0, #66	@ 0x42
 8002886:	f7fe ffcd 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 800288c:	2201      	movs	r2, #1
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002892:	4811      	ldr	r0, [pc, #68]	@ (80028d8 <ssd1306_TestRectangleInvert+0xb4>)
 8002894:	f7fe ffa0 	bl	80017d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002898:	2128      	movs	r1, #40	@ 0x28
 800289a:	2042      	movs	r0, #66	@ 0x42
 800289c:	f7fe ffc2 	bl	8001824 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <ssd1306_TestRectangleInvert+0xac>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a8:	480a      	ldr	r0, [pc, #40]	@ (80028d4 <ssd1306_TestRectangleInvert+0xb0>)
 80028aa:	f7fe ff95 	bl	80017d8 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 80028ae:	233f      	movs	r3, #63	@ 0x3f
 80028b0:	223f      	movs	r2, #63	@ 0x3f
 80028b2:	2100      	movs	r1, #0
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff fc43 	bl	8002140 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 80028ba:	233c      	movs	r3, #60	@ 0x3c
 80028bc:	227d      	movs	r2, #125	@ 0x7d
 80028be:	213a      	movs	r1, #58	@ 0x3a
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7ff fc3d 	bl	8002140 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 80028c6:	f7fe fe7d 	bl	80015c4 <ssd1306_UpdateScreen>
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	0800bd28 	.word	0x0800bd28
 80028d4:	08007194 	.word	0x08007194
 80028d8:	0800719c 	.word	0x0800719c
 80028dc:	080071a0 	.word	0x080071a0

080028e0 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	e010      	b.n	800290e <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	331e      	adds	r3, #30
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	2301      	movs	r3, #1
 8002900:	220a      	movs	r2, #10
 8002902:	210f      	movs	r1, #15
 8002904:	f7ff fa9c 	bl	8001e40 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3301      	adds	r3, #1
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d9eb      	bls.n	80028ec <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e011      	b.n	800293e <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	441a      	add	r2, r3
 8002924:	00d2      	lsls	r2, r2, #3
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	330f      	adds	r3, #15
 800292c:	b2d8      	uxtb	r0, r3
 800292e:	2301      	movs	r3, #1
 8002930:	220a      	movs	r2, #10
 8002932:	2128      	movs	r1, #40	@ 0x28
 8002934:	f7ff fb0b 	bl	8001f4e <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d9ea      	bls.n	800291a <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002944:	f7fe fe3e 	bl	80015c4 <ssd1306_UpdateScreen>
  return;
 8002948:	bf00      	nop
}
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002956:	2301      	movs	r3, #1
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2314      	movs	r3, #20
 8002962:	221e      	movs	r2, #30
 8002964:	211e      	movs	r1, #30
 8002966:	201e      	movs	r0, #30
 8002968:	f7ff f852 	bl	8001a10 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 800296c:	2301      	movs	r3, #1
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	231e      	movs	r3, #30
 8002978:	220a      	movs	r2, #10
 800297a:	2137      	movs	r1, #55	@ 0x37
 800297c:	2050      	movs	r0, #80	@ 0x50
 800297e:	f7ff f929 	bl	8001bd4 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002982:	f7fe fe1f 	bl	80015c4 <ssd1306_UpdateScreen>
  return;
 8002986:	bf00      	nop
}
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002992:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <ssd1306_TestPolyline+0x28>)
 8002994:	463c      	mov	r4, r7
 8002996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002998:	c407      	stmia	r4!, {r0, r1, r2}
 800299a:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800299c:	463b      	mov	r3, r7
 800299e:	2201      	movs	r2, #1
 80029a0:	2107      	movs	r1, #7
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe ffc2 	bl	800192c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 80029a8:	f7fe fe0c 	bl	80015c4 <ssd1306_UpdateScreen>
  return;
 80029ac:	bf00      	nop
}
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	080071a8 	.word	0x080071a8

080029b8 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80029be:	2001      	movs	r0, #1
 80029c0:	f7fe fde8 	bl	8001594 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80029c4:	2300      	movs	r3, #0
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	2340      	movs	r3, #64	@ 0x40
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <ssd1306_TestDrawBitmap+0x78>)
 80029d0:	2100      	movs	r1, #0
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7ff fc70 	bl	80022b8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029d8:	f7fe fdf4 	bl	80015c4 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80029dc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80029e0:	f000 fa78 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fdd5 	bl	8001594 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2340      	movs	r3, #64	@ 0x40
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2340      	movs	r3, #64	@ 0x40
 80029f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a34 <ssd1306_TestDrawBitmap+0x7c>)
 80029f6:	2100      	movs	r1, #0
 80029f8:	2020      	movs	r0, #32
 80029fa:	f7ff fc5d 	bl	80022b8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029fe:	f7fe fde1 	bl	80015c4 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002a02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a06:	f000 fa65 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(White);
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7fe fdc2 	bl	8001594 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8002a10:	2300      	movs	r3, #0
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	2340      	movs	r3, #64	@ 0x40
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2340      	movs	r3, #64	@ 0x40
 8002a1a:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <ssd1306_TestDrawBitmap+0x7c>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2020      	movs	r0, #32
 8002a20:	f7ff fc4a 	bl	80022b8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002a24:	f7fe fdce 	bl	80015c4 <ssd1306_UpdateScreen>
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0800bd58 	.word	0x0800bd58
 8002a34:	0800c158 	.word	0x0800c158

08002a38 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002a3c:	f7fe fd40 	bl	80014c0 <ssd1306_Init>

    ssd1306_TestFPS();
 8002a40:	f7ff fdd6 	bl	80025f0 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002a44:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a48:	f000 fa44 	bl	8002ed4 <HAL_Delay>
    ssd1306_TestBorder();
 8002a4c:	f7ff fcc0 	bl	80023d0 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002a50:	f7ff fd08 	bl	8002464 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002a54:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a58:	f000 fa3c 	bl	8002ed4 <HAL_Delay>
    ssd1306_TestFonts2();
 8002a5c:	f7ff fd5a 	bl	8002514 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002a60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a64:	f000 fa36 	bl	8002ed4 <HAL_Delay>
    ssd1306_TestFonts3();
 8002a68:	f7ff fd8e 	bl	8002588 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002a6c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a70:	f000 fa30 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe fd8d 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002a7a:	f7ff fe73 	bl	8002764 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002a7e:	f7ff fe59 	bl	8002734 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002a82:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a86:	f000 fa25 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe fd82 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002a90:	f7ff fea0 	bl	80027d4 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002a94:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a98:	f000 fa1c 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe fd79 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 8002aa2:	f7ff febf 	bl	8002824 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8002aa6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002aaa:	f000 fa13 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe fd70 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002ab4:	f7ff ff6a 	bl	800298c <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002ab8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002abc:	f000 fa0a 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe fd67 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestArc();
 8002ac6:	f7ff ff43 	bl	8002950 <ssd1306_TestArc>
    HAL_Delay(3000);
 8002aca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ace:	f000 fa01 	bl	8002ed4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe fd5e 	bl	8001594 <ssd1306_Fill>
    ssd1306_TestCircle();
 8002ad8:	f7ff ff02 	bl	80028e0 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8002adc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ae0:	f000 f9f8 	bl	8002ed4 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002ae4:	f7ff ff68 	bl	80029b8 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002ae8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002aec:	f000 f9f2 	bl	8002ed4 <HAL_Delay>
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6193      	str	r3, [r2, #24]
 8002b06:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_MspInit+0x60>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_MspInit+0x60>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010000 	.word	0x40010000

08002b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <HAL_ADC_MspInit+0x6c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d121      	bne.n	8002bbc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_ADC_MspInit+0x70>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bac:	2303      	movs	r3, #3
 8002bae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <HAL_ADC_MspInit+0x74>)
 8002bb8:	f000 fdae 	bl	8003718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012400 	.word	0x40012400
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010800 	.word	0x40010800

08002bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <HAL_I2C_MspInit+0x74>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d124      	bne.n	8002c3a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0e:	2312      	movs	r3, #18
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480b      	ldr	r0, [pc, #44]	@ (8002c4c <HAL_I2C_MspInit+0x7c>)
 8002c1e:	f000 fd7b 	bl	8003718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c22:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a08      	ldr	r2, [pc, #32]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002c28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_I2C_MspInit+0x78>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40005800 	.word	0x40005800
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010c00 	.word	0x40010c00

08002c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_TIM_Base_MspInit+0x34>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10b      	bne.n	8002c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_TIM_Base_MspInit+0x38>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <HAL_TIM_Base_MspInit+0x38>)
 8002c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c6c:	6193      	str	r3, [r2, #24]
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_TIM_Base_MspInit+0x38>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <HAL_TIM_MspPostInit+0x5c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d118      	bne.n	8002cde <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <HAL_TIM_MspPostInit+0x60>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <HAL_TIM_MspPostInit+0x60>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <HAL_TIM_MspPostInit+0x60>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	@ (8002cf0 <HAL_TIM_MspPostInit+0x64>)
 8002cda:	f000 fd1d 	bl	8003718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010800 	.word	0x40010800

08002cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <NMI_Handler+0x4>

08002cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <BusFault_Handler+0x4>

08002d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <UsageFault_Handler+0x4>

08002d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d44:	f000 f8aa 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	@ (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f002 ff3e 	bl	8005bfc <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20005000 	.word	0x20005000
 8002dac:	00000400 	.word	0x00000400
 8002db0:	2000054c 	.word	0x2000054c
 8002db4:	200006a0 	.word	0x200006a0

08002db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dc4:	f7ff fff8 	bl	8002db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc8:	480b      	ldr	r0, [pc, #44]	@ (8002df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dca:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd0:	e002      	b.n	8002dd8 <LoopCopyDataInit>

08002dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd6:	3304      	adds	r3, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ddc:	d3f9      	bcc.n	8002dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002de0:	4c09      	ldr	r4, [pc, #36]	@ (8002e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de4:	e001      	b.n	8002dea <LoopFillZerobss>

08002de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de8:	3204      	adds	r2, #4

08002dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dec:	d3fb      	bcc.n	8002de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dee:	f002 ff0b 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df2:	f7fe f89b 	bl	8000f2c <main>
  bx lr
 8002df6:	4770      	bx	lr
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002e00:	0800c7a4 	.word	0x0800c7a4
  ldr r2, =_sbss
 8002e04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002e08:	2000069c 	.word	0x2000069c

08002e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC1_2_IRQHandler>
	...

08002e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_Init+0x28>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_Init+0x28>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 fc45 	bl	80036b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fe62 	bl	8002af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fc4f 	bl	80036fe <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f000 fc25 	bl	80036c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000008 	.word	0x20000008
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	@ (8002ebc <HAL_IncTick+0x20>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	20000550 	.word	0x20000550

08002ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	@ (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	20000550 	.word	0x20000550

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffe0 	bl	8002ec0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008

08002f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0be      	b.n	80030bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fdfc 	bl	8002b58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fa05 	bl	8003370 <ADC_ConversionStop_Disable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8099 	bne.w	80030aa <HAL_ADC_Init+0x18e>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8095 	bne.w	80030aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f88:	f023 0302 	bic.w	r3, r3, #2
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b1b      	ldrb	r3, [r3, #12]
 8002fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_Init+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_Init+0xa8>
 8002fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Init+0xaa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7d1b      	ldrb	r3, [r3, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d119      	bne.n	8003008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	035a      	lsls	r2, r3, #13
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e00b      	b.n	8003008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b28      	ldr	r3, [pc, #160]	@ (80030c4 <HAL_ADC_Init+0x1a8>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d003      	beq.n	8003042 <HAL_ADC_Init+0x126>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_ADC_Init+0x1ac>)
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003086:	e018      	b.n	80030ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	f023 0312 	bic.w	r3, r3, #18
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x20>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0dc      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x1da>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d81c      	bhi.n	8003136 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b05      	subs	r3, #5
 800310e:	221f      	movs	r2, #31
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	4019      	ands	r1, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b05      	subs	r3, #5
 8003128:	fa00 f203 	lsl.w	r2, r0, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	@ 0x34
 8003134:	e03c      	b.n	80031b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d81c      	bhi.n	8003178 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	3b23      	subs	r3, #35	@ 0x23
 8003150:	221f      	movs	r2, #31
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	4019      	ands	r1, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	3b23      	subs	r3, #35	@ 0x23
 800316a:	fa00 f203 	lsl.w	r2, r0, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
 8003176:	e01b      	b.n	80031b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b41      	subs	r3, #65	@ 0x41
 800318a:	221f      	movs	r2, #31
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	4019      	ands	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	@ 0x41
 80031a4:	fa00 f203 	lsl.w	r2, r0, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	d91c      	bls.n	80031f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68d9      	ldr	r1, [r3, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	3b1e      	subs	r3, #30
 80031ca:	2207      	movs	r2, #7
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4019      	ands	r1, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6898      	ldr	r0, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	3b1e      	subs	r3, #30
 80031e4:	fa00 f203 	lsl.w	r2, r0, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	e019      	b.n	8003226 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6919      	ldr	r1, [r3, #16]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	2207      	movs	r2, #7
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	4019      	ands	r1, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6898      	ldr	r0, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d003      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003232:	2b11      	cmp	r3, #17
 8003234:	d132      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d125      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d126      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800325c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d11a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	0c9a      	lsrs	r2, r3, #18
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800327c:	e002      	b.n	8003284 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3b01      	subs	r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f9      	bne.n	800327e <HAL_ADC_ConfigChannel+0x1b2>
 800328a:	e007      	b.n	800329c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40012400 	.word	0x40012400
 80032b4:	20000000 	.word	0x20000000
 80032b8:	431bde83 	.word	0x431bde83

080032bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d040      	beq.n	800335c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <ADC_Enable+0xac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <ADC_Enable+0xb0>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0c9b      	lsrs	r3, r3, #18
 80032f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032f8:	e002      	b.n	8003300 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f9      	bne.n	80032fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003306:	f7ff fddb 	bl	8002ec0 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800330c:	e01f      	b.n	800334e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800330e:	f7ff fdd7 	bl	8002ec0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d918      	bls.n	800334e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d011      	beq.n	800334e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d1d8      	bne.n	800330e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	431bde83 	.word	0x431bde83

08003370 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d12e      	bne.n	80033e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800339a:	f7ff fd91 	bl	8002ec0 <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a0:	e01b      	b.n	80033da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033a2:	f7ff fd8d 	bl	8002ec0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d914      	bls.n	80033da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e007      	b.n	80033ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d0dc      	beq.n	80033a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_ADCEx_Calibration_Start+0x1e>
 800340e:	2302      	movs	r3, #2
 8003410:	e097      	b.n	8003542 <HAL_ADCEx_Calibration_Start+0x14e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffa8 	bl	8003370 <ADC_ConversionStop_Disable>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ff49 	bl	80032bc <ADC_Enable>
 800342a:	4603      	mov	r3, r0
 800342c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8081 	bne.w	8003538 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800343e:	f023 0302 	bic.w	r3, r3, #2
 8003442:	f043 0202 	orr.w	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800344a:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_ADCEx_Calibration_Start+0x158>)
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	2002      	movs	r0, #2
 8003450:	f001 fca0 	bl	8004d94 <HAL_RCCEx_GetPeriphCLKFreq>
 8003454:	4603      	mov	r3, r0
 8003456:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800345a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800345c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800345e:	e002      	b.n	8003466 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800347c:	f7ff fd20 	bl	8002ec0 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003482:	e01b      	b.n	80034bc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003484:	f7ff fd1c 	bl	8002ec0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d914      	bls.n	80034bc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00d      	beq.n	80034bc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	f023 0312 	bic.w	r3, r3, #18
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e042      	b.n	8003542 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1dc      	bne.n	8003484 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0204 	orr.w	r2, r2, #4
 80034d8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034da:	f7ff fcf1 	bl	8002ec0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034e0:	e01b      	b.n	800351a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034e2:	f7ff fced 	bl	8002ec0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b0a      	cmp	r3, #10
 80034ee:	d914      	bls.n	800351a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	f023 0312 	bic.w	r3, r3, #18
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e013      	b.n	8003542 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1dc      	bne.n	80034e2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	f023 0303 	bic.w	r3, r3, #3
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800357c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003582:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	@ (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	@ (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	@ 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	@ 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367c:	d301      	bcc.n	8003682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367e:	2301      	movs	r3, #1
 8003680:	e00f      	b.n	80036a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <SysTick_Config+0x40>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368a:	210f      	movs	r1, #15
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f7ff ff90 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <SysTick_Config+0x40>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369a:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <SysTick_Config+0x40>)
 800369c:	2207      	movs	r2, #7
 800369e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000e010 	.word	0xe000e010

080036b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff49 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d8:	f7ff ff5e 	bl	8003598 <__NVIC_GetPriorityGrouping>
 80036dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff ff90 	bl	8003608 <NVIC_EncodePriority>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff5f 	bl	80035b4 <__NVIC_SetPriority>
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffb0 	bl	800366c <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b08b      	sub	sp, #44	@ 0x2c
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	e169      	b.n	8003a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800372c:	2201      	movs	r2, #1
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 8158 	bne.w	80039fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a9a      	ldr	r2, [pc, #616]	@ (80039b8 <HAL_GPIO_Init+0x2a0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d05e      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003754:	4a98      	ldr	r2, [pc, #608]	@ (80039b8 <HAL_GPIO_Init+0x2a0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d875      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800375a:	4a98      	ldr	r2, [pc, #608]	@ (80039bc <HAL_GPIO_Init+0x2a4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d058      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003760:	4a96      	ldr	r2, [pc, #600]	@ (80039bc <HAL_GPIO_Init+0x2a4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d86f      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003766:	4a96      	ldr	r2, [pc, #600]	@ (80039c0 <HAL_GPIO_Init+0x2a8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d052      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 800376c:	4a94      	ldr	r2, [pc, #592]	@ (80039c0 <HAL_GPIO_Init+0x2a8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d869      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003772:	4a94      	ldr	r2, [pc, #592]	@ (80039c4 <HAL_GPIO_Init+0x2ac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04c      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003778:	4a92      	ldr	r2, [pc, #584]	@ (80039c4 <HAL_GPIO_Init+0x2ac>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d863      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800377e:	4a92      	ldr	r2, [pc, #584]	@ (80039c8 <HAL_GPIO_Init+0x2b0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d046      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003784:	4a90      	ldr	r2, [pc, #576]	@ (80039c8 <HAL_GPIO_Init+0x2b0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d85d      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800378a:	2b12      	cmp	r3, #18
 800378c:	d82a      	bhi.n	80037e4 <HAL_GPIO_Init+0xcc>
 800378e:	2b12      	cmp	r3, #18
 8003790:	d859      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003792:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <HAL_GPIO_Init+0x80>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	08003813 	.word	0x08003813
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	080037ff 	.word	0x080037ff
 80037a4:	08003841 	.word	0x08003841
 80037a8:	08003847 	.word	0x08003847
 80037ac:	08003847 	.word	0x08003847
 80037b0:	08003847 	.word	0x08003847
 80037b4:	08003847 	.word	0x08003847
 80037b8:	08003847 	.word	0x08003847
 80037bc:	08003847 	.word	0x08003847
 80037c0:	08003847 	.word	0x08003847
 80037c4:	08003847 	.word	0x08003847
 80037c8:	08003847 	.word	0x08003847
 80037cc:	08003847 	.word	0x08003847
 80037d0:	08003847 	.word	0x08003847
 80037d4:	08003847 	.word	0x08003847
 80037d8:	08003847 	.word	0x08003847
 80037dc:	080037f5 	.word	0x080037f5
 80037e0:	08003809 	.word	0x08003809
 80037e4:	4a79      	ldr	r2, [pc, #484]	@ (80039cc <HAL_GPIO_Init+0x2b4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ea:	e02c      	b.n	8003846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	623b      	str	r3, [r7, #32]
          break;
 80037f2:	e029      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	623b      	str	r3, [r7, #32]
          break;
 80037fc:	e024      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	3308      	adds	r3, #8
 8003804:	623b      	str	r3, [r7, #32]
          break;
 8003806:	e01f      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	330c      	adds	r3, #12
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e01a      	b.n	8003848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800381a:	2304      	movs	r3, #4
 800381c:	623b      	str	r3, [r7, #32]
          break;
 800381e:	e013      	b.n	8003848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003828:	2308      	movs	r3, #8
 800382a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	611a      	str	r2, [r3, #16]
          break;
 8003832:	e009      	b.n	8003848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003834:	2308      	movs	r3, #8
 8003836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	615a      	str	r2, [r3, #20]
          break;
 800383e:	e003      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
          break;
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x130>
          break;
 8003846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2bff      	cmp	r3, #255	@ 0xff
 800384c:	d801      	bhi.n	8003852 <HAL_GPIO_Init+0x13a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	e001      	b.n	8003856 <HAL_GPIO_Init+0x13e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2bff      	cmp	r3, #255	@ 0xff
 800385c:	d802      	bhi.n	8003864 <HAL_GPIO_Init+0x14c>
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	e002      	b.n	800386a <HAL_GPIO_Init+0x152>
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	3b08      	subs	r3, #8
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	210f      	movs	r1, #15
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b1 	beq.w	80039fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003898:	4b4d      	ldr	r3, [pc, #308]	@ (80039d0 <HAL_GPIO_Init+0x2b8>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4a4c      	ldr	r2, [pc, #304]	@ (80039d0 <HAL_GPIO_Init+0x2b8>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6193      	str	r3, [r2, #24]
 80038a4:	4b4a      	ldr	r3, [pc, #296]	@ (80039d0 <HAL_GPIO_Init+0x2b8>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b0:	4a48      	ldr	r2, [pc, #288]	@ (80039d4 <HAL_GPIO_Init+0x2bc>)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a40      	ldr	r2, [pc, #256]	@ (80039d8 <HAL_GPIO_Init+0x2c0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_GPIO_Init+0x1ec>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3f      	ldr	r2, [pc, #252]	@ (80039dc <HAL_GPIO_Init+0x2c4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00d      	beq.n	8003900 <HAL_GPIO_Init+0x1e8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3e      	ldr	r2, [pc, #248]	@ (80039e0 <HAL_GPIO_Init+0x2c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <HAL_GPIO_Init+0x1e4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3d      	ldr	r2, [pc, #244]	@ (80039e4 <HAL_GPIO_Init+0x2cc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_GPIO_Init+0x1e0>
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e004      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 8003904:	2300      	movs	r3, #0
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003916:	492f      	ldr	r1, [pc, #188]	@ (80039d4 <HAL_GPIO_Init+0x2bc>)
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	492c      	ldr	r1, [pc, #176]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800393e:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	43db      	mvns	r3, r3
 8003946:	4928      	ldr	r1, [pc, #160]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003948:	4013      	ands	r3, r2
 800394a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d006      	beq.n	8003966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003958:	4b23      	ldr	r3, [pc, #140]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	4922      	ldr	r1, [pc, #136]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	60cb      	str	r3, [r1, #12]
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	43db      	mvns	r3, r3
 800396e:	491e      	ldr	r1, [pc, #120]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003970:	4013      	ands	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003980:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	4918      	ldr	r1, [pc, #96]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800398e:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	43db      	mvns	r3, r3
 8003996:	4914      	ldr	r1, [pc, #80]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003998:	4013      	ands	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d021      	beq.n	80039ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	490e      	ldr	r1, [pc, #56]	@ (80039e8 <HAL_GPIO_Init+0x2d0>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e021      	b.n	80039fa <HAL_GPIO_Init+0x2e2>
 80039b6:	bf00      	nop
 80039b8:	10320000 	.word	0x10320000
 80039bc:	10310000 	.word	0x10310000
 80039c0:	10220000 	.word	0x10220000
 80039c4:	10210000 	.word	0x10210000
 80039c8:	10120000 	.word	0x10120000
 80039cc:	10110000 	.word	0x10110000
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40010800 	.word	0x40010800
 80039dc:	40010c00 	.word	0x40010c00
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_GPIO_Init+0x304>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	4909      	ldr	r1, [pc, #36]	@ (8003a1c <HAL_GPIO_Init+0x304>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f47f ae8e 	bne.w	800372c <HAL_GPIO_Init+0x14>
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	372c      	adds	r7, #44	@ 0x2c
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e001      	b.n	8003a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5e:	787b      	ldrb	r3, [r7, #1]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a64:	887a      	ldrh	r2, [r7, #2]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a6a:	e003      	b.n	8003a74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	041a      	lsls	r2, r3, #16
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	041a      	lsls	r2, r3, #16
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e12b      	b.n	8003d1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff f87a 	bl	8002bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	@ 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b14:	f001 f842 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4a81      	ldr	r2, [pc, #516]	@ (8003d24 <HAL_I2C_Init+0x274>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d807      	bhi.n	8003b34 <HAL_I2C_Init+0x84>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a80      	ldr	r2, [pc, #512]	@ (8003d28 <HAL_I2C_Init+0x278>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e006      	b.n	8003b42 <HAL_I2C_Init+0x92>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a7d      	ldr	r2, [pc, #500]	@ (8003d2c <HAL_I2C_Init+0x27c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0e7      	b.n	8003d1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a78      	ldr	r2, [pc, #480]	@ (8003d30 <HAL_I2C_Init+0x280>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0c9b      	lsrs	r3, r3, #18
 8003b54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a6a      	ldr	r2, [pc, #424]	@ (8003d24 <HAL_I2C_Init+0x274>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d802      	bhi.n	8003b84 <HAL_I2C_Init+0xd4>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3301      	adds	r3, #1
 8003b82:	e009      	b.n	8003b98 <HAL_I2C_Init+0xe8>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	4a69      	ldr	r2, [pc, #420]	@ (8003d34 <HAL_I2C_Init+0x284>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	3301      	adds	r3, #1
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003baa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	495c      	ldr	r1, [pc, #368]	@ (8003d24 <HAL_I2C_Init+0x274>)
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d819      	bhi.n	8003bec <HAL_I2C_Init+0x13c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e59      	subs	r1, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc6:	1c59      	adds	r1, r3, #1
 8003bc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bcc:	400b      	ands	r3, r1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_I2C_Init+0x138>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1e59      	subs	r1, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	e051      	b.n	8003c8c <HAL_I2C_Init+0x1dc>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e04f      	b.n	8003c8c <HAL_I2C_Init+0x1dc>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d111      	bne.n	8003c18 <HAL_I2C_Init+0x168>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	440b      	add	r3, r1
 8003c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c06:	3301      	adds	r3, #1
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e012      	b.n	8003c3e <HAL_I2C_Init+0x18e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	0099      	lsls	r1, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Init+0x196>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e022      	b.n	8003c8c <HAL_I2C_Init+0x1dc>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10e      	bne.n	8003c6c <HAL_I2C_Init+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1e58      	subs	r0, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	440b      	add	r3, r1
 8003c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c6a:	e00f      	b.n	8003c8c <HAL_I2C_Init+0x1dc>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	6809      	ldr	r1, [r1, #0]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6911      	ldr	r1, [r2, #16]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	000186a0 	.word	0x000186a0
 8003d28:	001e847f 	.word	0x001e847f
 8003d2c:	003d08ff 	.word	0x003d08ff
 8003d30:	431bde83 	.word	0x431bde83
 8003d34:	10624dd3 	.word	0x10624dd3

08003d38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d52:	f7ff f8b5 	bl	8002ec0 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	f040 80d9 	bne.w	8003f18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2319      	movs	r3, #25
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	496d      	ldr	r1, [pc, #436]	@ (8003f24 <HAL_I2C_Mem_Write+0x1ec>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f971 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e0cc      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Mem_Write+0x56>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0c5      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d007      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2221      	movs	r2, #33	@ 0x21
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2240      	movs	r2, #64	@ 0x40
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a4d      	ldr	r2, [pc, #308]	@ (8003f28 <HAL_I2C_Mem_Write+0x1f0>)
 8003df4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df6:	88f8      	ldrh	r0, [r7, #6]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	8979      	ldrh	r1, [r7, #10]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4603      	mov	r3, r0
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f890 	bl	8003f2c <I2C_RequestMemoryWrite>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d052      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e081      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa36 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d107      	bne.n	8003e3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06b      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1aa      	bne.n	8003e16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fa29 	bl	800431c <I2C_WaitOnBTFFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d107      	bne.n	8003ee8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e016      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	00100002 	.word	0x00100002
 8003f28:	ffff0000 	.word	0xffff0000

08003f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f878 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7c:	d103      	bne.n	8003f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e05f      	b.n	800404a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	492d      	ldr	r1, [pc, #180]	@ (8004054 <I2C_RequestMemoryWrite+0x128>)
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f8d3 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e04c      	b.n	800404a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	6a39      	ldr	r1, [r7, #32]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f95e 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e02b      	b.n	800404a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff8:	893b      	ldrh	r3, [r7, #8]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e021      	b.n	8004048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	b29b      	uxth	r3, r3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	6a39      	ldr	r1, [r7, #32]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f938 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	2b04      	cmp	r3, #4
 8004028:	d107      	bne.n	800403a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e005      	b.n	800404a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800403e:	893b      	ldrh	r3, [r7, #8]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	e048      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d044      	beq.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe ff25 	bl	8002ec0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d139      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10d      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	e00c      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10d      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	e00c      	b.n	800413c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d093      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	e071      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d123      	bne.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e067      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d041      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fe fe80 	bl	8002ec0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e021      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10c      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e00b      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af6d 	bne.w	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	e034      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f886 	bl	80043ac <I2C_IsAcknowledgeFailed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d028      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe fe05 	bl	8002ec0 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b80      	cmp	r3, #128	@ 0x80
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e007      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b80      	cmp	r3, #128	@ 0x80
 8004310:	d1c3      	bne.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f83e 	bl	80043ac <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fdbd 	bl	8002ec0 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d11b      	bne.n	80043fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e272      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b92      	ldr	r3, [pc, #584]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004434:	4b8f      	ldr	r3, [pc, #572]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
 8004440:	4b8c      	ldr	r3, [pc, #560]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b89      	ldr	r3, [pc, #548]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x12c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e24c      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x76>
 8004470:	4b80      	ldr	r3, [pc, #512]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7f      	ldr	r2, [pc, #508]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b7b      	ldr	r3, [pc, #492]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7a      	ldr	r2, [pc, #488]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b78      	ldr	r3, [pc, #480]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xbc>
 80044aa:	4b72      	ldr	r3, [pc, #456]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a71      	ldr	r2, [pc, #452]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b68      	ldr	r3, [pc, #416]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a67      	ldr	r2, [pc, #412]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fcec 	bl	8002ec0 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fce8 	bl	8002ec0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e200      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe4>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fe fcd8 	bl	8002ec0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fe fcd4 	bl	8002ec0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ec      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x10c>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b4c      	ldr	r3, [pc, #304]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800454e:	4b49      	ldr	r3, [pc, #292]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
 800455a:	4b46      	ldr	r3, [pc, #280]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c0      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4939      	ldr	r1, [pc, #228]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <HAL_RCC_OscConfig+0x270>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe fc8d 	bl	8002ec0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fe fc89 	bl	8002ec0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4927      	ldr	r1, [pc, #156]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b26      	ldr	r3, [pc, #152]	@ (8004678 <HAL_RCC_OscConfig+0x270>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fe fc6c 	bl	8002ec0 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fe fc68 	bl	8002ec0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e180      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03a      	beq.n	800468c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b17      	ldr	r3, [pc, #92]	@ (800467c <HAL_RCC_OscConfig+0x274>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fe fc4c 	bl	8002ec0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7fe fc48 	bl	8002ec0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e160      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800464a:	2001      	movs	r0, #1
 800464c:	f000 face 	bl	8004bec <RCC_Delay>
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004652:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <HAL_RCC_OscConfig+0x274>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fe fc32 	bl	8002ec0 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7fe fc2e 	bl	8002ec0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d908      	bls.n	8004680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e146      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	42420000 	.word	0x42420000
 800467c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b92      	ldr	r3, [pc, #584]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e9      	bne.n	8004660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b8b      	ldr	r3, [pc, #556]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a87      	ldr	r2, [pc, #540]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b4:	61d3      	str	r3, [r2, #28]
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b82      	ldr	r3, [pc, #520]	@ (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	@ (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7e      	ldr	r2, [pc, #504]	@ (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7fe fbef 	bl	8002ec0 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7fe fbeb 	bl	8002ec0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	@ 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e103      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b75      	ldr	r3, [pc, #468]	@ (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x312>
 800470c:	4b6f      	ldr	r3, [pc, #444]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a6e      	ldr	r2, [pc, #440]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e02d      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x334>
 8004722:	4b6a      	ldr	r3, [pc, #424]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6213      	str	r3, [r2, #32]
 800472e:	4b67      	ldr	r3, [pc, #412]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a66      	ldr	r2, [pc, #408]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x356>
 8004744:	4b61      	ldr	r3, [pc, #388]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a60      	ldr	r2, [pc, #384]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	4b5e      	ldr	r3, [pc, #376]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a5d      	ldr	r2, [pc, #372]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800475e:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a5a      	ldr	r2, [pc, #360]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	4b58      	ldr	r3, [pc, #352]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fe fb9f 	bl	8002ec0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fe fb9b 	bl	8002ec0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0b1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b4b      	ldr	r3, [pc, #300]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x37e>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fe fb89 	bl	8002ec0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fe fb85 	bl	8002ec0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e09b      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b3c      	ldr	r3, [pc, #240]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a3b      	ldr	r2, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f0:	4b36      	ldr	r3, [pc, #216]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d061      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d146      	bne.n	8004892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	@ (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fe fb59 	bl	8002ec0 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fe fb55 	bl	8002ec0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e06d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004824:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800483a:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4921      	ldr	r1, [pc, #132]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b1f      	ldr	r3, [pc, #124]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a19      	ldr	r1, [r3, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	430b      	orrs	r3, r1
 800485e:	491b      	ldr	r1, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe fb29 	bl	8002ec0 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe fb25 	bl	8002ec0 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x46a>
 8004890:	e035      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fe fb12 	bl	8002ec0 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe fb0e 	bl	8002ec0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e026      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x498>
 80048be:	e01e      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e019      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <HAL_RCC_OscConfig+0x500>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b67      	ldr	r3, [pc, #412]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4965      	ldr	r1, [pc, #404]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a58      	ldr	r2, [pc, #352]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a52      	ldr	r2, [pc, #328]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800498a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d040      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e073      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4936      	ldr	r1, [pc, #216]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fe fa60 	bl	8002ec0 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fe fa5c 	bl	8002ec0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e053      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4922      	ldr	r1, [pc, #136]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b12      	ldr	r3, [pc, #72]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490a      	ldr	r1, [pc, #40]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <HAL_RCC_ClockConfig+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe f9be 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	0800c358 	.word	0x0800c358
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004afa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x30>
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x36>
 8004b0e:	e027      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b12:	613b      	str	r3, [r7, #16]
      break;
 8004b14:	e027      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	0c9b      	lsrs	r3, r3, #18
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b2e:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0c5b      	lsrs	r3, r3, #17
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a0d      	ldr	r2, [pc, #52]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b42:	fb03 f202 	mul.w	r2, r3, r2
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e004      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0c      	ldr	r2, [pc, #48]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	613b      	str	r3, [r7, #16]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b62:	613b      	str	r3, [r7, #16]
      break;
 8004b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b66:	693b      	ldr	r3, [r7, #16]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	007a1200 	.word	0x007a1200
 8004b7c:	0800c370 	.word	0x0800c370
 8004b80:	0800c380 	.word	0x0800c380
 8004b84:	003d0900 	.word	0x003d0900

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b02      	ldr	r3, [pc, #8]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	20000000 	.word	0x20000000

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff2 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	0800c368 	.word	0x0800c368

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bc8:	f7ff ffde 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800c368 	.word	0x0800c368

08004bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <RCC_Delay+0x34>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8004c24 <RCC_Delay+0x38>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a5b      	lsrs	r3, r3, #9
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c08:	bf00      	nop
  }
  while (Delay --);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	60fa      	str	r2, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f9      	bne.n	8004c08 <RCC_Delay+0x1c>
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	20000000 	.word	0x20000000
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d07d      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c48:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b4c      	ldr	r3, [pc, #304]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4a4b      	ldr	r2, [pc, #300]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	61d3      	str	r3, [r2, #28]
 8004c60:	4b49      	ldr	r3, [pc, #292]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b46      	ldr	r3, [pc, #280]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d118      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7c:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a42      	ldr	r2, [pc, #264]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c88:	f7fe f91a 	bl	8002ec0 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fe f916 	bl	8002ec0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	@ 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e06d      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cae:	4b36      	ldr	r3, [pc, #216]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02e      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d027      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ce2:	4a29      	ldr	r2, [pc, #164]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d014      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fe f8e5 	bl	8002ec0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fe f8e1 	bl	8002ec0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e036      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ee      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4917      	ldr	r1, [pc, #92]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	4a13      	ldr	r2, [pc, #76]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	490b      	ldr	r1, [pc, #44]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4904      	ldr	r1, [pc, #16]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	42420440 	.word	0x42420440

08004d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	f200 808a 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d045      	beq.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004dca:	e082      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004dcc:	4b46      	ldr	r3, [pc, #280]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dd2:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d07b      	beq.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	0c9b      	lsrs	r3, r3, #18
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	4a41      	ldr	r2, [pc, #260]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d015      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004df6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	0c5b      	lsrs	r3, r3, #17
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e10:	4a38      	ldr	r2, [pc, #224]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e004      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e38:	d102      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	61bb      	str	r3, [r7, #24]
      break;
 8004e3e:	e04a      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4a2d      	ldr	r2, [pc, #180]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
      break;
 8004e4e:	e042      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e60:	d108      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e01f      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e80:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004e8c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e00f      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9e:	d11c      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004eac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004eb0:	61bb      	str	r3, [r7, #24]
      break;
 8004eb2:	e012      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004eb4:	e011      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eb6:	f7ff fe85 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	0b9b      	lsrs	r3, r3, #14
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	61bb      	str	r3, [r7, #24]
      break;
 8004ed0:	e004      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eda:	bf00      	nop
    }
  }
  return (frequency);
 8004edc:	69bb      	ldr	r3, [r7, #24]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0800c384 	.word	0x0800c384
 8004ef0:	0800c394 	.word	0x0800c394
 8004ef4:	007a1200 	.word	0x007a1200
 8004ef8:	003d0900 	.word	0x003d0900
 8004efc:	aaaaaaab 	.word	0xaaaaaaab

08004f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e041      	b.n	8004f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd fe92 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f000 fab2 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e041      	b.n	8005034 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f839 	bl	800503c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 fa63 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x24>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e022      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d109      	bne.n	800508e <HAL_TIM_PWM_Start+0x3e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	e015      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x58>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e008      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e05e      	b.n	8005180 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x82>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d0:	e013      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Start+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f0:	e003      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2201      	movs	r2, #1
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fc50 	bl	80059a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_TIM_PWM_Start+0x138>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d107      	bne.n	8005122 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_PWM_Start+0x138>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_TIM_PWM_Start+0xfa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005134:	d009      	beq.n	800514a <HAL_TIM_PWM_Start+0xfa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a14      	ldr	r2, [pc, #80]	@ (800518c <HAL_TIM_PWM_Start+0x13c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIM_PWM_Start+0xfa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a12      	ldr	r2, [pc, #72]	@ (8005190 <HAL_TIM_PWM_Start+0x140>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d111      	bne.n	800516e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b06      	cmp	r3, #6
 800515a:	d010      	beq.n	800517e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	e007      	b.n	800517e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800

08005194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e0ae      	b.n	8005310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	f200 809f 	bhi.w	8005300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	08005301 	.word	0x08005301
 80051d0:	08005301 	.word	0x08005301
 80051d4:	08005301 	.word	0x08005301
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	08005301 	.word	0x08005301
 80051e0:	08005301 	.word	0x08005301
 80051e4:	08005301 	.word	0x08005301
 80051e8:	0800527f 	.word	0x0800527f
 80051ec:	08005301 	.word	0x08005301
 80051f0:	08005301 	.word	0x08005301
 80051f4:	08005301 	.word	0x08005301
 80051f8:	080052bf 	.word	0x080052bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f9b2 	bl	800556c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0208 	orr.w	r2, r2, #8
 8005216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6999      	ldr	r1, [r3, #24]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	619a      	str	r2, [r3, #24]
      break;
 800523a:	e064      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9f8 	bl	8005638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	021a      	lsls	r2, r3, #8
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	619a      	str	r2, [r3, #24]
      break;
 800527c:	e043      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fa41 	bl	800570c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0208 	orr.w	r2, r2, #8
 8005298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0204 	bic.w	r2, r2, #4
 80052a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69d9      	ldr	r1, [r3, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	61da      	str	r2, [r3, #28]
      break;
 80052bc:	e023      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fa8b 	bl	80057e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	021a      	lsls	r2, r3, #8
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	61da      	str	r2, [r3, #28]
      break;
 80052fe:	e002      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIM_ConfigClockSource+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e0b4      	b.n	800549e <HAL_TIM_ConfigClockSource+0x186>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800535a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536c:	d03e      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0xd4>
 800536e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005372:	f200 8087 	bhi.w	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537a:	f000 8086 	beq.w	800548a <HAL_TIM_ConfigClockSource+0x172>
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005382:	d87f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b70      	cmp	r3, #112	@ 0x70
 8005386:	d01a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xa6>
 8005388:	2b70      	cmp	r3, #112	@ 0x70
 800538a:	d87b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b60      	cmp	r3, #96	@ 0x60
 800538e:	d050      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x11a>
 8005390:	2b60      	cmp	r3, #96	@ 0x60
 8005392:	d877      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b50      	cmp	r3, #80	@ 0x50
 8005396:	d03c      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xfa>
 8005398:	2b50      	cmp	r3, #80	@ 0x50
 800539a:	d873      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	d058      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x13a>
 80053a0:	2b40      	cmp	r3, #64	@ 0x40
 80053a2:	d86f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b30      	cmp	r3, #48	@ 0x30
 80053a6:	d064      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b30      	cmp	r3, #48	@ 0x30
 80053aa:	d86b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d060      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d867      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05c      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d05a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	e062      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ce:	f000 facc 	bl	800596a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
      break;
 80053ea:	e04f      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fc:	f000 fab5 	bl	800596a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800540e:	609a      	str	r2, [r3, #8]
      break;
 8005410:	e03c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	461a      	mov	r2, r3
 8005420:	f000 fa2c 	bl	800587c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2150      	movs	r1, #80	@ 0x50
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fa83 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005430:	e02c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	461a      	mov	r2, r3
 8005440:	f000 fa4a 	bl	80058d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2160      	movs	r1, #96	@ 0x60
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa73 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005450:	e01c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fa0c 	bl	800587c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2140      	movs	r1, #64	@ 0x40
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa63 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005470:	e00c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 fa5a 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005482:	e003      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e000      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a29      	ldr	r2, [pc, #164]	@ (8005560 <TIM_Base_SetConfig+0xb8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_Base_SetConfig+0x30>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0x30>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <TIM_Base_SetConfig+0xbc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0x30>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a25      	ldr	r2, [pc, #148]	@ (8005568 <TIM_Base_SetConfig+0xc0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <TIM_Base_SetConfig+0xb8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_Base_SetConfig+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f8:	d007      	beq.n	800550a <TIM_Base_SetConfig+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_Base_SetConfig+0xbc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0x62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <TIM_Base_SetConfig+0xc0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a07      	ldr	r2, [pc, #28]	@ (8005560 <TIM_Base_SetConfig+0xb8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d103      	bne.n	8005550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	615a      	str	r2, [r3, #20]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800

0800556c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f023 0201 	bic.w	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 0302 	bic.w	r3, r3, #2
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <TIM_OC1_SetConfig+0xc8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10c      	bne.n	80055e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0308 	bic.w	r3, r3, #8
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 0304 	bic.w	r3, r3, #4
 80055e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <TIM_OC1_SetConfig+0xc8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d111      	bne.n	800560e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40012c00 	.word	0x40012c00

08005638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0210 	bic.w	r2, r3, #16
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <TIM_OC2_SetConfig+0xd0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10d      	bne.n	80056b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	@ (8005708 <TIM_OC2_SetConfig+0xd0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d113      	bne.n	80056e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	40012c00 	.word	0x40012c00

0800570c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1d      	ldr	r2, [pc, #116]	@ (80057dc <TIM_OC3_SetConfig+0xd0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10d      	bne.n	8005786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <TIM_OC3_SetConfig+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d113      	bne.n	80057b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40012c00 	.word	0x40012c00

080057e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800582a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	031b      	lsls	r3, r3, #12
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a0f      	ldr	r2, [pc, #60]	@ (8005878 <TIM_OC4_SetConfig+0x98>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d109      	bne.n	8005854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00

0800587c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 030a 	bic.w	r3, r3, #10
 80058b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0210 	bic.w	r2, r3, #16
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	031b      	lsls	r3, r3, #12
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005914:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	621a      	str	r2, [r3, #32]
}
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	f043 0307 	orr.w	r3, r3, #7
 8005958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	609a      	str	r2, [r3, #8]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005984:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	431a      	orrs	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	609a      	str	r2, [r3, #8]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2201      	movs	r2, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e046      	b.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a16      	ldr	r2, [pc, #88]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d009      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a10      	ldr	r2, [pc, #64]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d10c      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800

08005aac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e03d      	b.n	8005b44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
	...

08005b50 <sniprintf>:
 8005b50:	b40c      	push	{r2, r3}
 8005b52:	b530      	push	{r4, r5, lr}
 8005b54:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <sniprintf+0x64>)
 8005b56:	1e0c      	subs	r4, r1, #0
 8005b58:	681d      	ldr	r5, [r3, #0]
 8005b5a:	b09d      	sub	sp, #116	@ 0x74
 8005b5c:	da08      	bge.n	8005b70 <sniprintf+0x20>
 8005b5e:	238b      	movs	r3, #139	@ 0x8b
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	b01d      	add	sp, #116	@ 0x74
 8005b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b6c:	b002      	add	sp, #8
 8005b6e:	4770      	bx	lr
 8005b70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b78:	bf0c      	ite	eq
 8005b7a:	4623      	moveq	r3, r4
 8005b7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b88:	9002      	str	r0, [sp, #8]
 8005b8a:	9006      	str	r0, [sp, #24]
 8005b8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b90:	4628      	mov	r0, r5
 8005b92:	ab21      	add	r3, sp, #132	@ 0x84
 8005b94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b96:	a902      	add	r1, sp, #8
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	f000 f9bb 	bl	8005f14 <_svfiprintf_r>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	bfbc      	itt	lt
 8005ba2:	238b      	movlt	r3, #139	@ 0x8b
 8005ba4:	602b      	strlt	r3, [r5, #0]
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	d0dd      	beq.n	8005b66 <sniprintf+0x16>
 8005baa:	2200      	movs	r2, #0
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	e7d9      	b.n	8005b66 <sniprintf+0x16>
 8005bb2:	bf00      	nop
 8005bb4:	2000000c 	.word	0x2000000c

08005bb8 <memmove>:
 8005bb8:	4288      	cmp	r0, r1
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	eb01 0402 	add.w	r4, r1, r2
 8005bc0:	d902      	bls.n	8005bc8 <memmove+0x10>
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	d807      	bhi.n	8005bd8 <memmove+0x20>
 8005bc8:	1e43      	subs	r3, r0, #1
 8005bca:	42a1      	cmp	r1, r4
 8005bcc:	d008      	beq.n	8005be0 <memmove+0x28>
 8005bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd6:	e7f8      	b.n	8005bca <memmove+0x12>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	4402      	add	r2, r0
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	d100      	bne.n	8005be2 <memmove+0x2a>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bea:	e7f7      	b.n	8005bdc <memmove+0x24>

08005bec <memset>:
 8005bec:	4603      	mov	r3, r0
 8005bee:	4402      	add	r2, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <__errno>:
 8005bfc:	4b01      	ldr	r3, [pc, #4]	@ (8005c04 <__errno+0x8>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	2000000c 	.word	0x2000000c

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	4d0c      	ldr	r5, [pc, #48]	@ (8005c40 <__libc_init_array+0x38>)
 8005c0e:	4c0d      	ldr	r4, [pc, #52]	@ (8005c44 <__libc_init_array+0x3c>)
 8005c10:	1b64      	subs	r4, r4, r5
 8005c12:	10a4      	asrs	r4, r4, #2
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	f001 fa5e 	bl	80070d8 <_init>
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	4d0a      	ldr	r5, [pc, #40]	@ (8005c48 <__libc_init_array+0x40>)
 8005c20:	4c0a      	ldr	r4, [pc, #40]	@ (8005c4c <__libc_init_array+0x44>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c30:	4798      	blx	r3
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3a:	4798      	blx	r3
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	0800c79c 	.word	0x0800c79c
 8005c44:	0800c79c 	.word	0x0800c79c
 8005c48:	0800c79c 	.word	0x0800c79c
 8005c4c:	0800c7a0 	.word	0x0800c7a0

08005c50 <__retarget_lock_acquire_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_release_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <memcpy>:
 8005c54:	440a      	add	r2, r1
 8005c56:	4291      	cmp	r1, r2
 8005c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c5c:	d100      	bne.n	8005c60 <memcpy+0xc>
 8005c5e:	4770      	bx	lr
 8005c60:	b510      	push	{r4, lr}
 8005c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c66:	4291      	cmp	r1, r2
 8005c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c6c:	d1f9      	bne.n	8005c62 <memcpy+0xe>
 8005c6e:	bd10      	pop	{r4, pc}

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d040      	beq.n	8005cfa <_free_r+0x8a>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f000 f8de 	bl	8005e44 <__malloc_lock>
 8005c88:	4a1c      	ldr	r2, [pc, #112]	@ (8005cfc <_free_r+0x8c>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x2c>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f000 b8da 	b.w	8005e50 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1809      	addeq	r1, r1, r0
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x1e>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x4c>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x42>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1850      	adds	r0, r2, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x6c>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x22>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4408      	add	r0, r1
 8005cd6:	6010      	str	r0, [r2, #0]
 8005cd8:	6053      	str	r3, [r2, #4]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x22>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x74>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x22>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	6063      	str	r3, [r4, #4]
 8005cf6:	6054      	str	r4, [r2, #4]
 8005cf8:	e7cb      	b.n	8005c92 <_free_r+0x22>
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000698 	.word	0x20000698

08005d00 <sbrk_aligned>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4e0f      	ldr	r6, [pc, #60]	@ (8005d40 <sbrk_aligned+0x40>)
 8005d04:	460c      	mov	r4, r1
 8005d06:	6831      	ldr	r1, [r6, #0]
 8005d08:	4605      	mov	r5, r0
 8005d0a:	b911      	cbnz	r1, 8005d12 <sbrk_aligned+0x12>
 8005d0c:	f000 fb90 	bl	8006430 <_sbrk_r>
 8005d10:	6030      	str	r0, [r6, #0]
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 fb8b 	bl	8006430 <_sbrk_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d103      	bne.n	8005d26 <sbrk_aligned+0x26>
 8005d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d22:	4620      	mov	r0, r4
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	1cc4      	adds	r4, r0, #3
 8005d28:	f024 0403 	bic.w	r4, r4, #3
 8005d2c:	42a0      	cmp	r0, r4
 8005d2e:	d0f8      	beq.n	8005d22 <sbrk_aligned+0x22>
 8005d30:	1a21      	subs	r1, r4, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 fb7c 	bl	8006430 <_sbrk_r>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d1f2      	bne.n	8005d22 <sbrk_aligned+0x22>
 8005d3c:	e7ef      	b.n	8005d1e <sbrk_aligned+0x1e>
 8005d3e:	bf00      	nop
 8005d40:	20000694 	.word	0x20000694

08005d44 <_malloc_r>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	1ccd      	adds	r5, r1, #3
 8005d4a:	f025 0503 	bic.w	r5, r5, #3
 8005d4e:	3508      	adds	r5, #8
 8005d50:	2d0c      	cmp	r5, #12
 8005d52:	bf38      	it	cc
 8005d54:	250c      	movcc	r5, #12
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	4606      	mov	r6, r0
 8005d5a:	db01      	blt.n	8005d60 <_malloc_r+0x1c>
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	d904      	bls.n	8005d6a <_malloc_r+0x26>
 8005d60:	230c      	movs	r3, #12
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	2000      	movs	r0, #0
 8005d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e40 <_malloc_r+0xfc>
 8005d6e:	f000 f869 	bl	8005e44 <__malloc_lock>
 8005d72:	f8d8 3000 	ldr.w	r3, [r8]
 8005d76:	461c      	mov	r4, r3
 8005d78:	bb44      	cbnz	r4, 8005dcc <_malloc_r+0x88>
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f7ff ffbf 	bl	8005d00 <sbrk_aligned>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	4604      	mov	r4, r0
 8005d86:	d158      	bne.n	8005e3a <_malloc_r+0xf6>
 8005d88:	f8d8 4000 	ldr.w	r4, [r8]
 8005d8c:	4627      	mov	r7, r4
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d143      	bne.n	8005e1a <_malloc_r+0xd6>
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d04b      	beq.n	8005e2e <_malloc_r+0xea>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	4639      	mov	r1, r7
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	eb04 0903 	add.w	r9, r4, r3
 8005da0:	f000 fb46 	bl	8006430 <_sbrk_r>
 8005da4:	4581      	cmp	r9, r0
 8005da6:	d142      	bne.n	8005e2e <_malloc_r+0xea>
 8005da8:	6821      	ldr	r1, [r4, #0]
 8005daa:	4630      	mov	r0, r6
 8005dac:	1a6d      	subs	r5, r5, r1
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7ff ffa6 	bl	8005d00 <sbrk_aligned>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d03a      	beq.n	8005e2e <_malloc_r+0xea>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	442b      	add	r3, r5
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	bb62      	cbnz	r2, 8005e20 <_malloc_r+0xdc>
 8005dc6:	f8c8 7000 	str.w	r7, [r8]
 8005dca:	e00f      	b.n	8005dec <_malloc_r+0xa8>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	1b52      	subs	r2, r2, r5
 8005dd0:	d420      	bmi.n	8005e14 <_malloc_r+0xd0>
 8005dd2:	2a0b      	cmp	r2, #11
 8005dd4:	d917      	bls.n	8005e06 <_malloc_r+0xc2>
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	6025      	str	r5, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	6059      	strne	r1, [r3, #4]
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	bf08      	it	eq
 8005de4:	f8c8 1000 	streq.w	r1, [r8]
 8005de8:	5162      	str	r2, [r4, r5]
 8005dea:	604b      	str	r3, [r1, #4]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f82f 	bl	8005e50 <__malloc_unlock>
 8005df2:	f104 000b 	add.w	r0, r4, #11
 8005df6:	1d23      	adds	r3, r4, #4
 8005df8:	f020 0007 	bic.w	r0, r0, #7
 8005dfc:	1ac2      	subs	r2, r0, r3
 8005dfe:	bf1c      	itt	ne
 8005e00:	1a1b      	subne	r3, r3, r0
 8005e02:	50a3      	strne	r3, [r4, r2]
 8005e04:	e7af      	b.n	8005d66 <_malloc_r+0x22>
 8005e06:	6862      	ldr	r2, [r4, #4]
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	bf0c      	ite	eq
 8005e0c:	f8c8 2000 	streq.w	r2, [r8]
 8005e10:	605a      	strne	r2, [r3, #4]
 8005e12:	e7eb      	b.n	8005dec <_malloc_r+0xa8>
 8005e14:	4623      	mov	r3, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7ae      	b.n	8005d78 <_malloc_r+0x34>
 8005e1a:	463c      	mov	r4, r7
 8005e1c:	687f      	ldr	r7, [r7, #4]
 8005e1e:	e7b6      	b.n	8005d8e <_malloc_r+0x4a>
 8005e20:	461a      	mov	r2, r3
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d1fb      	bne.n	8005e20 <_malloc_r+0xdc>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6053      	str	r3, [r2, #4]
 8005e2c:	e7de      	b.n	8005dec <_malloc_r+0xa8>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	4630      	mov	r0, r6
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f000 f80c 	bl	8005e50 <__malloc_unlock>
 8005e38:	e794      	b.n	8005d64 <_malloc_r+0x20>
 8005e3a:	6005      	str	r5, [r0, #0]
 8005e3c:	e7d6      	b.n	8005dec <_malloc_r+0xa8>
 8005e3e:	bf00      	nop
 8005e40:	20000698 	.word	0x20000698

08005e44 <__malloc_lock>:
 8005e44:	4801      	ldr	r0, [pc, #4]	@ (8005e4c <__malloc_lock+0x8>)
 8005e46:	f7ff bf03 	b.w	8005c50 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20000690 	.word	0x20000690

08005e50 <__malloc_unlock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	@ (8005e58 <__malloc_unlock+0x8>)
 8005e52:	f7ff befe 	b.w	8005c52 <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	20000690 	.word	0x20000690

08005e5c <__ssputs_r>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	461f      	mov	r7, r3
 8005e62:	688e      	ldr	r6, [r1, #8]
 8005e64:	4682      	mov	sl, r0
 8005e66:	42be      	cmp	r6, r7
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4690      	mov	r8, r2
 8005e6c:	680b      	ldr	r3, [r1, #0]
 8005e6e:	d82d      	bhi.n	8005ecc <__ssputs_r+0x70>
 8005e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e78:	d026      	beq.n	8005ec8 <__ssputs_r+0x6c>
 8005e7a:	6965      	ldr	r5, [r4, #20]
 8005e7c:	6909      	ldr	r1, [r1, #16]
 8005e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e82:	eba3 0901 	sub.w	r9, r3, r1
 8005e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e8a:	1c7b      	adds	r3, r7, #1
 8005e8c:	444b      	add	r3, r9
 8005e8e:	106d      	asrs	r5, r5, #1
 8005e90:	429d      	cmp	r5, r3
 8005e92:	bf38      	it	cc
 8005e94:	461d      	movcc	r5, r3
 8005e96:	0553      	lsls	r3, r2, #21
 8005e98:	d527      	bpl.n	8005eea <__ssputs_r+0x8e>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7ff ff52 	bl	8005d44 <_malloc_r>
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	b360      	cbz	r0, 8005efe <__ssputs_r+0xa2>
 8005ea4:	464a      	mov	r2, r9
 8005ea6:	6921      	ldr	r1, [r4, #16]
 8005ea8:	f7ff fed4 	bl	8005c54 <memcpy>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	6126      	str	r6, [r4, #16]
 8005eba:	444e      	add	r6, r9
 8005ebc:	6026      	str	r6, [r4, #0]
 8005ebe:	463e      	mov	r6, r7
 8005ec0:	6165      	str	r5, [r4, #20]
 8005ec2:	eba5 0509 	sub.w	r5, r5, r9
 8005ec6:	60a5      	str	r5, [r4, #8]
 8005ec8:	42be      	cmp	r6, r7
 8005eca:	d900      	bls.n	8005ece <__ssputs_r+0x72>
 8005ecc:	463e      	mov	r6, r7
 8005ece:	4632      	mov	r2, r6
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	f7ff fe70 	bl	8005bb8 <memmove>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	68a3      	ldr	r3, [r4, #8]
 8005edc:	1b9b      	subs	r3, r3, r6
 8005ede:	60a3      	str	r3, [r4, #8]
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	4433      	add	r3, r6
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	462a      	mov	r2, r5
 8005eec:	f000 fabe 	bl	800646c <_realloc_r>
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d1e0      	bne.n	8005eb8 <__ssputs_r+0x5c>
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	6921      	ldr	r1, [r4, #16]
 8005efa:	f7ff feb9 	bl	8005c70 <_free_r>
 8005efe:	230c      	movs	r3, #12
 8005f00:	f8ca 3000 	str.w	r3, [sl]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0e:	81a3      	strh	r3, [r4, #12]
 8005f10:	e7e9      	b.n	8005ee6 <__ssputs_r+0x8a>
	...

08005f14 <_svfiprintf_r>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	4698      	mov	r8, r3
 8005f1a:	898b      	ldrh	r3, [r1, #12]
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	460d      	mov	r5, r1
 8005f22:	4614      	mov	r4, r2
 8005f24:	b09d      	sub	sp, #116	@ 0x74
 8005f26:	d510      	bpl.n	8005f4a <_svfiprintf_r+0x36>
 8005f28:	690b      	ldr	r3, [r1, #16]
 8005f2a:	b973      	cbnz	r3, 8005f4a <_svfiprintf_r+0x36>
 8005f2c:	2140      	movs	r1, #64	@ 0x40
 8005f2e:	f7ff ff09 	bl	8005d44 <_malloc_r>
 8005f32:	6028      	str	r0, [r5, #0]
 8005f34:	6128      	str	r0, [r5, #16]
 8005f36:	b930      	cbnz	r0, 8005f46 <_svfiprintf_r+0x32>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b01d      	add	sp, #116	@ 0x74
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	2340      	movs	r3, #64	@ 0x40
 8005f48:	616b      	str	r3, [r5, #20]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f4e:	2320      	movs	r3, #32
 8005f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f54:	2330      	movs	r3, #48	@ 0x30
 8005f56:	f04f 0901 	mov.w	r9, #1
 8005f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80060f8 <_svfiprintf_r+0x1e4>
 8005f62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f66:	4623      	mov	r3, r4
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6e:	b10a      	cbz	r2, 8005f74 <_svfiprintf_r+0x60>
 8005f70:	2a25      	cmp	r2, #37	@ 0x25
 8005f72:	d1f9      	bne.n	8005f68 <_svfiprintf_r+0x54>
 8005f74:	ebba 0b04 	subs.w	fp, sl, r4
 8005f78:	d00b      	beq.n	8005f92 <_svfiprintf_r+0x7e>
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff ff6b 	bl	8005e5c <__ssputs_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	f000 80a7 	beq.w	80060da <_svfiprintf_r+0x1c6>
 8005f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f8e:	445a      	add	r2, fp
 8005f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 809f 	beq.w	80060da <_svfiprintf_r+0x1c6>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa6:	f10a 0a01 	add.w	sl, sl, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2205      	movs	r2, #5
 8005fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbc:	484e      	ldr	r0, [pc, #312]	@ (80060f8 <_svfiprintf_r+0x1e4>)
 8005fbe:	f000 fa47 	bl	8006450 <memchr>
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	b9d8      	cbnz	r0, 8005ffe <_svfiprintf_r+0xea>
 8005fc6:	06d0      	lsls	r0, r2, #27
 8005fc8:	bf44      	itt	mi
 8005fca:	2320      	movmi	r3, #32
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fd0:	0711      	lsls	r1, r2, #28
 8005fd2:	bf44      	itt	mi
 8005fd4:	232b      	movmi	r3, #43	@ 0x2b
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fda:	f89a 3000 	ldrb.w	r3, [sl]
 8005fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe0:	d015      	beq.n	800600e <_svfiprintf_r+0xfa>
 8005fe2:	4654      	mov	r4, sl
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f04f 0c0a 	mov.w	ip, #10
 8005fea:	9a07      	ldr	r2, [sp, #28]
 8005fec:	4621      	mov	r1, r4
 8005fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff2:	3b30      	subs	r3, #48	@ 0x30
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	d94b      	bls.n	8006090 <_svfiprintf_r+0x17c>
 8005ff8:	b1b0      	cbz	r0, 8006028 <_svfiprintf_r+0x114>
 8005ffa:	9207      	str	r2, [sp, #28]
 8005ffc:	e014      	b.n	8006028 <_svfiprintf_r+0x114>
 8005ffe:	eba0 0308 	sub.w	r3, r0, r8
 8006002:	fa09 f303 	lsl.w	r3, r9, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	46a2      	mov	sl, r4
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	e7d2      	b.n	8005fb4 <_svfiprintf_r+0xa0>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	9103      	str	r1, [sp, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfbb      	ittet	lt
 800601a:	425b      	neglt	r3, r3
 800601c:	f042 0202 	orrlt.w	r2, r2, #2
 8006020:	9307      	strge	r3, [sp, #28]
 8006022:	9307      	strlt	r3, [sp, #28]
 8006024:	bfb8      	it	lt
 8006026:	9204      	strlt	r2, [sp, #16]
 8006028:	7823      	ldrb	r3, [r4, #0]
 800602a:	2b2e      	cmp	r3, #46	@ 0x2e
 800602c:	d10a      	bne.n	8006044 <_svfiprintf_r+0x130>
 800602e:	7863      	ldrb	r3, [r4, #1]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d132      	bne.n	800609a <_svfiprintf_r+0x186>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	3402      	adds	r4, #2
 8006038:	1d1a      	adds	r2, r3, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	9203      	str	r2, [sp, #12]
 800603e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80060fc <_svfiprintf_r+0x1e8>
 8006048:	2203      	movs	r2, #3
 800604a:	4650      	mov	r0, sl
 800604c:	7821      	ldrb	r1, [r4, #0]
 800604e:	f000 f9ff 	bl	8006450 <memchr>
 8006052:	b138      	cbz	r0, 8006064 <_svfiprintf_r+0x150>
 8006054:	2240      	movs	r2, #64	@ 0x40
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	eba0 000a 	sub.w	r0, r0, sl
 800605c:	4082      	lsls	r2, r0
 800605e:	4313      	orrs	r3, r2
 8006060:	3401      	adds	r4, #1
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	2206      	movs	r2, #6
 800606a:	4825      	ldr	r0, [pc, #148]	@ (8006100 <_svfiprintf_r+0x1ec>)
 800606c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006070:	f000 f9ee 	bl	8006450 <memchr>
 8006074:	2800      	cmp	r0, #0
 8006076:	d036      	beq.n	80060e6 <_svfiprintf_r+0x1d2>
 8006078:	4b22      	ldr	r3, [pc, #136]	@ (8006104 <_svfiprintf_r+0x1f0>)
 800607a:	bb1b      	cbnz	r3, 80060c4 <_svfiprintf_r+0x1b0>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	3307      	adds	r3, #7
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	3308      	adds	r3, #8
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608a:	4433      	add	r3, r6
 800608c:	9309      	str	r3, [sp, #36]	@ 0x24
 800608e:	e76a      	b.n	8005f66 <_svfiprintf_r+0x52>
 8006090:	460c      	mov	r4, r1
 8006092:	2001      	movs	r0, #1
 8006094:	fb0c 3202 	mla	r2, ip, r2, r3
 8006098:	e7a8      	b.n	8005fec <_svfiprintf_r+0xd8>
 800609a:	2300      	movs	r3, #0
 800609c:	f04f 0c0a 	mov.w	ip, #10
 80060a0:	4619      	mov	r1, r3
 80060a2:	3401      	adds	r4, #1
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	4620      	mov	r0, r4
 80060a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ac:	3a30      	subs	r2, #48	@ 0x30
 80060ae:	2a09      	cmp	r2, #9
 80060b0:	d903      	bls.n	80060ba <_svfiprintf_r+0x1a6>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0c6      	beq.n	8006044 <_svfiprintf_r+0x130>
 80060b6:	9105      	str	r1, [sp, #20]
 80060b8:	e7c4      	b.n	8006044 <_svfiprintf_r+0x130>
 80060ba:	4604      	mov	r4, r0
 80060bc:	2301      	movs	r3, #1
 80060be:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c2:	e7f0      	b.n	80060a6 <_svfiprintf_r+0x192>
 80060c4:	ab03      	add	r3, sp, #12
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	462a      	mov	r2, r5
 80060ca:	4638      	mov	r0, r7
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <_svfiprintf_r+0x1f4>)
 80060ce:	a904      	add	r1, sp, #16
 80060d0:	f3af 8000 	nop.w
 80060d4:	1c42      	adds	r2, r0, #1
 80060d6:	4606      	mov	r6, r0
 80060d8:	d1d6      	bne.n	8006088 <_svfiprintf_r+0x174>
 80060da:	89ab      	ldrh	r3, [r5, #12]
 80060dc:	065b      	lsls	r3, r3, #25
 80060de:	f53f af2d 	bmi.w	8005f3c <_svfiprintf_r+0x28>
 80060e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060e4:	e72c      	b.n	8005f40 <_svfiprintf_r+0x2c>
 80060e6:	ab03      	add	r3, sp, #12
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	462a      	mov	r2, r5
 80060ec:	4638      	mov	r0, r7
 80060ee:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <_svfiprintf_r+0x1f4>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	f000 f87d 	bl	80061f0 <_printf_i>
 80060f6:	e7ed      	b.n	80060d4 <_svfiprintf_r+0x1c0>
 80060f8:	0800c396 	.word	0x0800c396
 80060fc:	0800c39c 	.word	0x0800c39c
 8006100:	0800c3a0 	.word	0x0800c3a0
 8006104:	00000000 	.word	0x00000000
 8006108:	08005e5d 	.word	0x08005e5d

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4616      	mov	r6, r2
 8006112:	4698      	mov	r8, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	4607      	mov	r7, r0
 800611a:	4293      	cmp	r3, r2
 800611c:	bfb8      	it	lt
 800611e:	4613      	movlt	r3, r2
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006126:	460c      	mov	r4, r1
 8006128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800612c:	b10a      	cbz	r2, 8006132 <_printf_common+0x26>
 800612e:	3301      	adds	r3, #1
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	0699      	lsls	r1, r3, #26
 8006136:	bf42      	ittt	mi
 8006138:	6833      	ldrmi	r3, [r6, #0]
 800613a:	3302      	addmi	r3, #2
 800613c:	6033      	strmi	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	f015 0506 	ands.w	r5, r5, #6
 8006144:	d106      	bne.n	8006154 <_printf_common+0x48>
 8006146:	f104 0a19 	add.w	sl, r4, #25
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	6832      	ldr	r2, [r6, #0]
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	42ab      	cmp	r3, r5
 8006152:	dc2b      	bgt.n	80061ac <_printf_common+0xa0>
 8006154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	3b00      	subs	r3, #0
 800615c:	bf18      	it	ne
 800615e:	2301      	movne	r3, #1
 8006160:	0692      	lsls	r2, r2, #26
 8006162:	d430      	bmi.n	80061c6 <_printf_common+0xba>
 8006164:	4641      	mov	r1, r8
 8006166:	4638      	mov	r0, r7
 8006168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800616c:	47c8      	blx	r9
 800616e:	3001      	adds	r0, #1
 8006170:	d023      	beq.n	80061ba <_printf_common+0xae>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	f003 0306 	and.w	r3, r3, #6
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf14      	ite	ne
 800617e:	2500      	movne	r5, #0
 8006180:	6833      	ldreq	r3, [r6, #0]
 8006182:	f04f 0600 	mov.w	r6, #0
 8006186:	bf08      	it	eq
 8006188:	68e5      	ldreq	r5, [r4, #12]
 800618a:	f104 041a 	add.w	r4, r4, #26
 800618e:	bf08      	it	eq
 8006190:	1aed      	subeq	r5, r5, r3
 8006192:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006196:	bf08      	it	eq
 8006198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800619c:	4293      	cmp	r3, r2
 800619e:	bfc4      	itt	gt
 80061a0:	1a9b      	subgt	r3, r3, r2
 80061a2:	18ed      	addgt	r5, r5, r3
 80061a4:	42b5      	cmp	r5, r6
 80061a6:	d11a      	bne.n	80061de <_printf_common+0xd2>
 80061a8:	2000      	movs	r0, #0
 80061aa:	e008      	b.n	80061be <_printf_common+0xb2>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4652      	mov	r2, sl
 80061b0:	4641      	mov	r1, r8
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c8      	blx	r9
 80061b6:	3001      	adds	r0, #1
 80061b8:	d103      	bne.n	80061c2 <_printf_common+0xb6>
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c2:	3501      	adds	r5, #1
 80061c4:	e7c1      	b.n	800614a <_printf_common+0x3e>
 80061c6:	2030      	movs	r0, #48	@ 0x30
 80061c8:	18e1      	adds	r1, r4, r3
 80061ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061d4:	4422      	add	r2, r4
 80061d6:	3302      	adds	r3, #2
 80061d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061dc:	e7c2      	b.n	8006164 <_printf_common+0x58>
 80061de:	2301      	movs	r3, #1
 80061e0:	4622      	mov	r2, r4
 80061e2:	4641      	mov	r1, r8
 80061e4:	4638      	mov	r0, r7
 80061e6:	47c8      	blx	r9
 80061e8:	3001      	adds	r0, #1
 80061ea:	d0e6      	beq.n	80061ba <_printf_common+0xae>
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7d9      	b.n	80061a4 <_printf_common+0x98>

080061f0 <_printf_i>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	7e0f      	ldrb	r7, [r1, #24]
 80061f6:	4691      	mov	r9, r2
 80061f8:	2f78      	cmp	r7, #120	@ 0x78
 80061fa:	4680      	mov	r8, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	469a      	mov	sl, r3
 8006200:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006206:	d807      	bhi.n	8006218 <_printf_i+0x28>
 8006208:	2f62      	cmp	r7, #98	@ 0x62
 800620a:	d80a      	bhi.n	8006222 <_printf_i+0x32>
 800620c:	2f00      	cmp	r7, #0
 800620e:	f000 80d3 	beq.w	80063b8 <_printf_i+0x1c8>
 8006212:	2f58      	cmp	r7, #88	@ 0x58
 8006214:	f000 80ba 	beq.w	800638c <_printf_i+0x19c>
 8006218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800621c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006220:	e03a      	b.n	8006298 <_printf_i+0xa8>
 8006222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006226:	2b15      	cmp	r3, #21
 8006228:	d8f6      	bhi.n	8006218 <_printf_i+0x28>
 800622a:	a101      	add	r1, pc, #4	@ (adr r1, 8006230 <_printf_i+0x40>)
 800622c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006230:	08006289 	.word	0x08006289
 8006234:	0800629d 	.word	0x0800629d
 8006238:	08006219 	.word	0x08006219
 800623c:	08006219 	.word	0x08006219
 8006240:	08006219 	.word	0x08006219
 8006244:	08006219 	.word	0x08006219
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006219 	.word	0x08006219
 8006250:	08006219 	.word	0x08006219
 8006254:	08006219 	.word	0x08006219
 8006258:	08006219 	.word	0x08006219
 800625c:	0800639f 	.word	0x0800639f
 8006260:	080062c7 	.word	0x080062c7
 8006264:	08006359 	.word	0x08006359
 8006268:	08006219 	.word	0x08006219
 800626c:	08006219 	.word	0x08006219
 8006270:	080063c1 	.word	0x080063c1
 8006274:	08006219 	.word	0x08006219
 8006278:	080062c7 	.word	0x080062c7
 800627c:	08006219 	.word	0x08006219
 8006280:	08006219 	.word	0x08006219
 8006284:	08006361 	.word	0x08006361
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006298:	2301      	movs	r3, #1
 800629a:	e09e      	b.n	80063da <_printf_i+0x1ea>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	6820      	ldr	r0, [r4, #0]
 80062a0:	1d19      	adds	r1, r3, #4
 80062a2:	6031      	str	r1, [r6, #0]
 80062a4:	0606      	lsls	r6, r0, #24
 80062a6:	d501      	bpl.n	80062ac <_printf_i+0xbc>
 80062a8:	681d      	ldr	r5, [r3, #0]
 80062aa:	e003      	b.n	80062b4 <_printf_i+0xc4>
 80062ac:	0645      	lsls	r5, r0, #25
 80062ae:	d5fb      	bpl.n	80062a8 <_printf_i+0xb8>
 80062b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xd0>
 80062b8:	232d      	movs	r3, #45	@ 0x2d
 80062ba:	426d      	negs	r5, r5
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c0:	230a      	movs	r3, #10
 80062c2:	4859      	ldr	r0, [pc, #356]	@ (8006428 <_printf_i+0x238>)
 80062c4:	e011      	b.n	80062ea <_printf_i+0xfa>
 80062c6:	6821      	ldr	r1, [r4, #0]
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	0608      	lsls	r0, r1, #24
 80062cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80062d0:	d402      	bmi.n	80062d8 <_printf_i+0xe8>
 80062d2:	0649      	lsls	r1, r1, #25
 80062d4:	bf48      	it	mi
 80062d6:	b2ad      	uxthmi	r5, r5
 80062d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062da:	6033      	str	r3, [r6, #0]
 80062dc:	bf14      	ite	ne
 80062de:	230a      	movne	r3, #10
 80062e0:	2308      	moveq	r3, #8
 80062e2:	4851      	ldr	r0, [pc, #324]	@ (8006428 <_printf_i+0x238>)
 80062e4:	2100      	movs	r1, #0
 80062e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ea:	6866      	ldr	r6, [r4, #4]
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	bfa8      	it	ge
 80062f0:	6821      	ldrge	r1, [r4, #0]
 80062f2:	60a6      	str	r6, [r4, #8]
 80062f4:	bfa4      	itt	ge
 80062f6:	f021 0104 	bicge.w	r1, r1, #4
 80062fa:	6021      	strge	r1, [r4, #0]
 80062fc:	b90d      	cbnz	r5, 8006302 <_printf_i+0x112>
 80062fe:	2e00      	cmp	r6, #0
 8006300:	d04b      	beq.n	800639a <_printf_i+0x1aa>
 8006302:	4616      	mov	r6, r2
 8006304:	fbb5 f1f3 	udiv	r1, r5, r3
 8006308:	fb03 5711 	mls	r7, r3, r1, r5
 800630c:	5dc7      	ldrb	r7, [r0, r7]
 800630e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006312:	462f      	mov	r7, r5
 8006314:	42bb      	cmp	r3, r7
 8006316:	460d      	mov	r5, r1
 8006318:	d9f4      	bls.n	8006304 <_printf_i+0x114>
 800631a:	2b08      	cmp	r3, #8
 800631c:	d10b      	bne.n	8006336 <_printf_i+0x146>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	07df      	lsls	r7, r3, #31
 8006322:	d508      	bpl.n	8006336 <_printf_i+0x146>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6861      	ldr	r1, [r4, #4]
 8006328:	4299      	cmp	r1, r3
 800632a:	bfde      	ittt	le
 800632c:	2330      	movle	r3, #48	@ 0x30
 800632e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006332:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006336:	1b92      	subs	r2, r2, r6
 8006338:	6122      	str	r2, [r4, #16]
 800633a:	464b      	mov	r3, r9
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f8cd a000 	str.w	sl, [sp]
 8006344:	aa03      	add	r2, sp, #12
 8006346:	f7ff fee1 	bl	800610c <_printf_common>
 800634a:	3001      	adds	r0, #1
 800634c:	d14a      	bne.n	80063e4 <_printf_i+0x1f4>
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
 8006352:	b004      	add	sp, #16
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f043 0320 	orr.w	r3, r3, #32
 800635e:	6023      	str	r3, [r4, #0]
 8006360:	2778      	movs	r7, #120	@ 0x78
 8006362:	4832      	ldr	r0, [pc, #200]	@ (800642c <_printf_i+0x23c>)
 8006364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	061f      	lsls	r7, r3, #24
 800636e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006372:	d402      	bmi.n	800637a <_printf_i+0x18a>
 8006374:	065f      	lsls	r7, r3, #25
 8006376:	bf48      	it	mi
 8006378:	b2ad      	uxthmi	r5, r5
 800637a:	6031      	str	r1, [r6, #0]
 800637c:	07d9      	lsls	r1, r3, #31
 800637e:	bf44      	itt	mi
 8006380:	f043 0320 	orrmi.w	r3, r3, #32
 8006384:	6023      	strmi	r3, [r4, #0]
 8006386:	b11d      	cbz	r5, 8006390 <_printf_i+0x1a0>
 8006388:	2310      	movs	r3, #16
 800638a:	e7ab      	b.n	80062e4 <_printf_i+0xf4>
 800638c:	4826      	ldr	r0, [pc, #152]	@ (8006428 <_printf_i+0x238>)
 800638e:	e7e9      	b.n	8006364 <_printf_i+0x174>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f023 0320 	bic.w	r3, r3, #32
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	e7f6      	b.n	8006388 <_printf_i+0x198>
 800639a:	4616      	mov	r6, r2
 800639c:	e7bd      	b.n	800631a <_printf_i+0x12a>
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	1d18      	adds	r0, r3, #4
 80063a4:	6961      	ldr	r1, [r4, #20]
 80063a6:	6030      	str	r0, [r6, #0]
 80063a8:	062e      	lsls	r6, r5, #24
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	d501      	bpl.n	80063b2 <_printf_i+0x1c2>
 80063ae:	6019      	str	r1, [r3, #0]
 80063b0:	e002      	b.n	80063b8 <_printf_i+0x1c8>
 80063b2:	0668      	lsls	r0, r5, #25
 80063b4:	d5fb      	bpl.n	80063ae <_printf_i+0x1be>
 80063b6:	8019      	strh	r1, [r3, #0]
 80063b8:	2300      	movs	r3, #0
 80063ba:	4616      	mov	r6, r2
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	e7bc      	b.n	800633a <_printf_i+0x14a>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	2100      	movs	r1, #0
 80063c4:	1d1a      	adds	r2, r3, #4
 80063c6:	6032      	str	r2, [r6, #0]
 80063c8:	681e      	ldr	r6, [r3, #0]
 80063ca:	6862      	ldr	r2, [r4, #4]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f83f 	bl	8006450 <memchr>
 80063d2:	b108      	cbz	r0, 80063d8 <_printf_i+0x1e8>
 80063d4:	1b80      	subs	r0, r0, r6
 80063d6:	6060      	str	r0, [r4, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	2300      	movs	r3, #0
 80063de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e2:	e7aa      	b.n	800633a <_printf_i+0x14a>
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	47d0      	blx	sl
 80063ee:	3001      	adds	r0, #1
 80063f0:	d0ad      	beq.n	800634e <_printf_i+0x15e>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	079b      	lsls	r3, r3, #30
 80063f6:	d413      	bmi.n	8006420 <_printf_i+0x230>
 80063f8:	68e0      	ldr	r0, [r4, #12]
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	4298      	cmp	r0, r3
 80063fe:	bfb8      	it	lt
 8006400:	4618      	movlt	r0, r3
 8006402:	e7a6      	b.n	8006352 <_printf_i+0x162>
 8006404:	2301      	movs	r3, #1
 8006406:	4632      	mov	r2, r6
 8006408:	4649      	mov	r1, r9
 800640a:	4640      	mov	r0, r8
 800640c:	47d0      	blx	sl
 800640e:	3001      	adds	r0, #1
 8006410:	d09d      	beq.n	800634e <_printf_i+0x15e>
 8006412:	3501      	adds	r5, #1
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	9903      	ldr	r1, [sp, #12]
 8006418:	1a5b      	subs	r3, r3, r1
 800641a:	42ab      	cmp	r3, r5
 800641c:	dcf2      	bgt.n	8006404 <_printf_i+0x214>
 800641e:	e7eb      	b.n	80063f8 <_printf_i+0x208>
 8006420:	2500      	movs	r5, #0
 8006422:	f104 0619 	add.w	r6, r4, #25
 8006426:	e7f5      	b.n	8006414 <_printf_i+0x224>
 8006428:	0800c3a7 	.word	0x0800c3a7
 800642c:	0800c3b8 	.word	0x0800c3b8

08006430 <_sbrk_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	2300      	movs	r3, #0
 8006434:	4d05      	ldr	r5, [pc, #20]	@ (800644c <_sbrk_r+0x1c>)
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fc fc86 	bl	8002d4c <_sbrk>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_sbrk_r+0x1a>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_sbrk_r+0x1a>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	2000068c 	.word	0x2000068c

08006450 <memchr>:
 8006450:	4603      	mov	r3, r0
 8006452:	b510      	push	{r4, lr}
 8006454:	b2c9      	uxtb	r1, r1
 8006456:	4402      	add	r2, r0
 8006458:	4293      	cmp	r3, r2
 800645a:	4618      	mov	r0, r3
 800645c:	d101      	bne.n	8006462 <memchr+0x12>
 800645e:	2000      	movs	r0, #0
 8006460:	e003      	b.n	800646a <memchr+0x1a>
 8006462:	7804      	ldrb	r4, [r0, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	428c      	cmp	r4, r1
 8006468:	d1f6      	bne.n	8006458 <memchr+0x8>
 800646a:	bd10      	pop	{r4, pc}

0800646c <_realloc_r>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4680      	mov	r8, r0
 8006472:	4615      	mov	r5, r2
 8006474:	460c      	mov	r4, r1
 8006476:	b921      	cbnz	r1, 8006482 <_realloc_r+0x16>
 8006478:	4611      	mov	r1, r2
 800647a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	f7ff bc61 	b.w	8005d44 <_malloc_r>
 8006482:	b92a      	cbnz	r2, 8006490 <_realloc_r+0x24>
 8006484:	f7ff fbf4 	bl	8005c70 <_free_r>
 8006488:	2400      	movs	r4, #0
 800648a:	4620      	mov	r0, r4
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006490:	f000 f81a 	bl	80064c8 <_malloc_usable_size_r>
 8006494:	4285      	cmp	r5, r0
 8006496:	4606      	mov	r6, r0
 8006498:	d802      	bhi.n	80064a0 <_realloc_r+0x34>
 800649a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800649e:	d8f4      	bhi.n	800648a <_realloc_r+0x1e>
 80064a0:	4629      	mov	r1, r5
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff fc4e 	bl	8005d44 <_malloc_r>
 80064a8:	4607      	mov	r7, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0ec      	beq.n	8006488 <_realloc_r+0x1c>
 80064ae:	42b5      	cmp	r5, r6
 80064b0:	462a      	mov	r2, r5
 80064b2:	4621      	mov	r1, r4
 80064b4:	bf28      	it	cs
 80064b6:	4632      	movcs	r2, r6
 80064b8:	f7ff fbcc 	bl	8005c54 <memcpy>
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff fbd6 	bl	8005c70 <_free_r>
 80064c4:	463c      	mov	r4, r7
 80064c6:	e7e0      	b.n	800648a <_realloc_r+0x1e>

080064c8 <_malloc_usable_size_r>:
 80064c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064cc:	1f18      	subs	r0, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bfbc      	itt	lt
 80064d2:	580b      	ldrlt	r3, [r1, r0]
 80064d4:	18c0      	addlt	r0, r0, r3
 80064d6:	4770      	bx	lr

080064d8 <cosf>:
 80064d8:	b507      	push	{r0, r1, r2, lr}
 80064da:	4a1a      	ldr	r2, [pc, #104]	@ (8006544 <cosf+0x6c>)
 80064dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80064e0:	4293      	cmp	r3, r2
 80064e2:	4601      	mov	r1, r0
 80064e4:	d805      	bhi.n	80064f2 <cosf+0x1a>
 80064e6:	2100      	movs	r1, #0
 80064e8:	b003      	add	sp, #12
 80064ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ee:	f000 b865 	b.w	80065bc <__kernel_cosf>
 80064f2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80064f6:	d304      	bcc.n	8006502 <cosf+0x2a>
 80064f8:	f7fa fa22 	bl	8000940 <__aeabi_fsub>
 80064fc:	b003      	add	sp, #12
 80064fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006502:	4669      	mov	r1, sp
 8006504:	f000 f950 	bl	80067a8 <__ieee754_rem_pio2f>
 8006508:	f000 0203 	and.w	r2, r0, #3
 800650c:	2a01      	cmp	r2, #1
 800650e:	d007      	beq.n	8006520 <cosf+0x48>
 8006510:	2a02      	cmp	r2, #2
 8006512:	d00c      	beq.n	800652e <cosf+0x56>
 8006514:	b982      	cbnz	r2, 8006538 <cosf+0x60>
 8006516:	9901      	ldr	r1, [sp, #4]
 8006518:	9800      	ldr	r0, [sp, #0]
 800651a:	f000 f84f 	bl	80065bc <__kernel_cosf>
 800651e:	e7ed      	b.n	80064fc <cosf+0x24>
 8006520:	9901      	ldr	r1, [sp, #4]
 8006522:	9800      	ldr	r0, [sp, #0]
 8006524:	f000 f8ca 	bl	80066bc <__kernel_sinf>
 8006528:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800652c:	e7e6      	b.n	80064fc <cosf+0x24>
 800652e:	9901      	ldr	r1, [sp, #4]
 8006530:	9800      	ldr	r0, [sp, #0]
 8006532:	f000 f843 	bl	80065bc <__kernel_cosf>
 8006536:	e7f7      	b.n	8006528 <cosf+0x50>
 8006538:	2201      	movs	r2, #1
 800653a:	9901      	ldr	r1, [sp, #4]
 800653c:	9800      	ldr	r0, [sp, #0]
 800653e:	f000 f8bd 	bl	80066bc <__kernel_sinf>
 8006542:	e7db      	b.n	80064fc <cosf+0x24>
 8006544:	3f490fd8 	.word	0x3f490fd8

08006548 <sinf>:
 8006548:	b507      	push	{r0, r1, r2, lr}
 800654a:	4a1b      	ldr	r2, [pc, #108]	@ (80065b8 <sinf+0x70>)
 800654c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006550:	4293      	cmp	r3, r2
 8006552:	4601      	mov	r1, r0
 8006554:	d806      	bhi.n	8006564 <sinf+0x1c>
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	b003      	add	sp, #12
 800655c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006560:	f000 b8ac 	b.w	80066bc <__kernel_sinf>
 8006564:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006568:	d304      	bcc.n	8006574 <sinf+0x2c>
 800656a:	f7fa f9e9 	bl	8000940 <__aeabi_fsub>
 800656e:	b003      	add	sp, #12
 8006570:	f85d fb04 	ldr.w	pc, [sp], #4
 8006574:	4669      	mov	r1, sp
 8006576:	f000 f917 	bl	80067a8 <__ieee754_rem_pio2f>
 800657a:	f000 0003 	and.w	r0, r0, #3
 800657e:	2801      	cmp	r0, #1
 8006580:	d008      	beq.n	8006594 <sinf+0x4c>
 8006582:	2802      	cmp	r0, #2
 8006584:	d00b      	beq.n	800659e <sinf+0x56>
 8006586:	b990      	cbnz	r0, 80065ae <sinf+0x66>
 8006588:	2201      	movs	r2, #1
 800658a:	9901      	ldr	r1, [sp, #4]
 800658c:	9800      	ldr	r0, [sp, #0]
 800658e:	f000 f895 	bl	80066bc <__kernel_sinf>
 8006592:	e7ec      	b.n	800656e <sinf+0x26>
 8006594:	9901      	ldr	r1, [sp, #4]
 8006596:	9800      	ldr	r0, [sp, #0]
 8006598:	f000 f810 	bl	80065bc <__kernel_cosf>
 800659c:	e7e7      	b.n	800656e <sinf+0x26>
 800659e:	2201      	movs	r2, #1
 80065a0:	9901      	ldr	r1, [sp, #4]
 80065a2:	9800      	ldr	r0, [sp, #0]
 80065a4:	f000 f88a 	bl	80066bc <__kernel_sinf>
 80065a8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80065ac:	e7df      	b.n	800656e <sinf+0x26>
 80065ae:	9901      	ldr	r1, [sp, #4]
 80065b0:	9800      	ldr	r0, [sp, #0]
 80065b2:	f000 f803 	bl	80065bc <__kernel_cosf>
 80065b6:	e7f7      	b.n	80065a8 <sinf+0x60>
 80065b8:	3f490fd8 	.word	0x3f490fd8

080065bc <__kernel_cosf>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80065c4:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80065c8:	4606      	mov	r6, r0
 80065ca:	4688      	mov	r8, r1
 80065cc:	d203      	bcs.n	80065d6 <__kernel_cosf+0x1a>
 80065ce:	f7fa fc87 	bl	8000ee0 <__aeabi_f2iz>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d05c      	beq.n	8006690 <__kernel_cosf+0xd4>
 80065d6:	4631      	mov	r1, r6
 80065d8:	4630      	mov	r0, r6
 80065da:	f7fa fabb 	bl	8000b54 <__aeabi_fmul>
 80065de:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80065e2:	4604      	mov	r4, r0
 80065e4:	f7fa fab6 	bl	8000b54 <__aeabi_fmul>
 80065e8:	492b      	ldr	r1, [pc, #172]	@ (8006698 <__kernel_cosf+0xdc>)
 80065ea:	4607      	mov	r7, r0
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7fa fab1 	bl	8000b54 <__aeabi_fmul>
 80065f2:	492a      	ldr	r1, [pc, #168]	@ (800669c <__kernel_cosf+0xe0>)
 80065f4:	f7fa f9a6 	bl	8000944 <__addsf3>
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7fa faab 	bl	8000b54 <__aeabi_fmul>
 80065fe:	4928      	ldr	r1, [pc, #160]	@ (80066a0 <__kernel_cosf+0xe4>)
 8006600:	f7fa f99e 	bl	8000940 <__aeabi_fsub>
 8006604:	4621      	mov	r1, r4
 8006606:	f7fa faa5 	bl	8000b54 <__aeabi_fmul>
 800660a:	4926      	ldr	r1, [pc, #152]	@ (80066a4 <__kernel_cosf+0xe8>)
 800660c:	f7fa f99a 	bl	8000944 <__addsf3>
 8006610:	4621      	mov	r1, r4
 8006612:	f7fa fa9f 	bl	8000b54 <__aeabi_fmul>
 8006616:	4924      	ldr	r1, [pc, #144]	@ (80066a8 <__kernel_cosf+0xec>)
 8006618:	f7fa f992 	bl	8000940 <__aeabi_fsub>
 800661c:	4621      	mov	r1, r4
 800661e:	f7fa fa99 	bl	8000b54 <__aeabi_fmul>
 8006622:	4922      	ldr	r1, [pc, #136]	@ (80066ac <__kernel_cosf+0xf0>)
 8006624:	f7fa f98e 	bl	8000944 <__addsf3>
 8006628:	4621      	mov	r1, r4
 800662a:	f7fa fa93 	bl	8000b54 <__aeabi_fmul>
 800662e:	4621      	mov	r1, r4
 8006630:	f7fa fa90 	bl	8000b54 <__aeabi_fmul>
 8006634:	4641      	mov	r1, r8
 8006636:	4604      	mov	r4, r0
 8006638:	4630      	mov	r0, r6
 800663a:	f7fa fa8b 	bl	8000b54 <__aeabi_fmul>
 800663e:	4601      	mov	r1, r0
 8006640:	4620      	mov	r0, r4
 8006642:	f7fa f97d 	bl	8000940 <__aeabi_fsub>
 8006646:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <__kernel_cosf+0xf4>)
 8006648:	4604      	mov	r4, r0
 800664a:	429d      	cmp	r5, r3
 800664c:	d80a      	bhi.n	8006664 <__kernel_cosf+0xa8>
 800664e:	4601      	mov	r1, r0
 8006650:	4638      	mov	r0, r7
 8006652:	f7fa f975 	bl	8000940 <__aeabi_fsub>
 8006656:	4601      	mov	r1, r0
 8006658:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800665c:	f7fa f970 	bl	8000940 <__aeabi_fsub>
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <__kernel_cosf+0xf8>)
 8006666:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800666a:	429d      	cmp	r5, r3
 800666c:	bf8c      	ite	hi
 800666e:	4d12      	ldrhi	r5, [pc, #72]	@ (80066b8 <__kernel_cosf+0xfc>)
 8006670:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8006674:	4629      	mov	r1, r5
 8006676:	f7fa f963 	bl	8000940 <__aeabi_fsub>
 800667a:	4629      	mov	r1, r5
 800667c:	4606      	mov	r6, r0
 800667e:	4638      	mov	r0, r7
 8006680:	f7fa f95e 	bl	8000940 <__aeabi_fsub>
 8006684:	4621      	mov	r1, r4
 8006686:	f7fa f95b 	bl	8000940 <__aeabi_fsub>
 800668a:	4601      	mov	r1, r0
 800668c:	4630      	mov	r0, r6
 800668e:	e7e5      	b.n	800665c <__kernel_cosf+0xa0>
 8006690:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006694:	e7e4      	b.n	8006660 <__kernel_cosf+0xa4>
 8006696:	bf00      	nop
 8006698:	ad47d74e 	.word	0xad47d74e
 800669c:	310f74f6 	.word	0x310f74f6
 80066a0:	3493f27c 	.word	0x3493f27c
 80066a4:	37d00d01 	.word	0x37d00d01
 80066a8:	3ab60b61 	.word	0x3ab60b61
 80066ac:	3d2aaaab 	.word	0x3d2aaaab
 80066b0:	3e999999 	.word	0x3e999999
 80066b4:	3f480000 	.word	0x3f480000
 80066b8:	3e900000 	.word	0x3e900000

080066bc <__kernel_sinf>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80066c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80066c8:	4604      	mov	r4, r0
 80066ca:	460f      	mov	r7, r1
 80066cc:	4691      	mov	r9, r2
 80066ce:	d203      	bcs.n	80066d8 <__kernel_sinf+0x1c>
 80066d0:	f7fa fc06 	bl	8000ee0 <__aeabi_f2iz>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d035      	beq.n	8006744 <__kernel_sinf+0x88>
 80066d8:	4621      	mov	r1, r4
 80066da:	4620      	mov	r0, r4
 80066dc:	f7fa fa3a 	bl	8000b54 <__aeabi_fmul>
 80066e0:	4605      	mov	r5, r0
 80066e2:	4601      	mov	r1, r0
 80066e4:	4620      	mov	r0, r4
 80066e6:	f7fa fa35 	bl	8000b54 <__aeabi_fmul>
 80066ea:	4929      	ldr	r1, [pc, #164]	@ (8006790 <__kernel_sinf+0xd4>)
 80066ec:	4606      	mov	r6, r0
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7fa fa30 	bl	8000b54 <__aeabi_fmul>
 80066f4:	4927      	ldr	r1, [pc, #156]	@ (8006794 <__kernel_sinf+0xd8>)
 80066f6:	f7fa f923 	bl	8000940 <__aeabi_fsub>
 80066fa:	4629      	mov	r1, r5
 80066fc:	f7fa fa2a 	bl	8000b54 <__aeabi_fmul>
 8006700:	4925      	ldr	r1, [pc, #148]	@ (8006798 <__kernel_sinf+0xdc>)
 8006702:	f7fa f91f 	bl	8000944 <__addsf3>
 8006706:	4629      	mov	r1, r5
 8006708:	f7fa fa24 	bl	8000b54 <__aeabi_fmul>
 800670c:	4923      	ldr	r1, [pc, #140]	@ (800679c <__kernel_sinf+0xe0>)
 800670e:	f7fa f917 	bl	8000940 <__aeabi_fsub>
 8006712:	4629      	mov	r1, r5
 8006714:	f7fa fa1e 	bl	8000b54 <__aeabi_fmul>
 8006718:	4921      	ldr	r1, [pc, #132]	@ (80067a0 <__kernel_sinf+0xe4>)
 800671a:	f7fa f913 	bl	8000944 <__addsf3>
 800671e:	4680      	mov	r8, r0
 8006720:	f1b9 0f00 	cmp.w	r9, #0
 8006724:	d111      	bne.n	800674a <__kernel_sinf+0x8e>
 8006726:	4601      	mov	r1, r0
 8006728:	4628      	mov	r0, r5
 800672a:	f7fa fa13 	bl	8000b54 <__aeabi_fmul>
 800672e:	491d      	ldr	r1, [pc, #116]	@ (80067a4 <__kernel_sinf+0xe8>)
 8006730:	f7fa f906 	bl	8000940 <__aeabi_fsub>
 8006734:	4631      	mov	r1, r6
 8006736:	f7fa fa0d 	bl	8000b54 <__aeabi_fmul>
 800673a:	4601      	mov	r1, r0
 800673c:	4620      	mov	r0, r4
 800673e:	f7fa f901 	bl	8000944 <__addsf3>
 8006742:	4604      	mov	r4, r0
 8006744:	4620      	mov	r0, r4
 8006746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800674e:	4638      	mov	r0, r7
 8006750:	f7fa fa00 	bl	8000b54 <__aeabi_fmul>
 8006754:	4641      	mov	r1, r8
 8006756:	4681      	mov	r9, r0
 8006758:	4630      	mov	r0, r6
 800675a:	f7fa f9fb 	bl	8000b54 <__aeabi_fmul>
 800675e:	4601      	mov	r1, r0
 8006760:	4648      	mov	r0, r9
 8006762:	f7fa f8ed 	bl	8000940 <__aeabi_fsub>
 8006766:	4629      	mov	r1, r5
 8006768:	f7fa f9f4 	bl	8000b54 <__aeabi_fmul>
 800676c:	4639      	mov	r1, r7
 800676e:	f7fa f8e7 	bl	8000940 <__aeabi_fsub>
 8006772:	490c      	ldr	r1, [pc, #48]	@ (80067a4 <__kernel_sinf+0xe8>)
 8006774:	4605      	mov	r5, r0
 8006776:	4630      	mov	r0, r6
 8006778:	f7fa f9ec 	bl	8000b54 <__aeabi_fmul>
 800677c:	4601      	mov	r1, r0
 800677e:	4628      	mov	r0, r5
 8006780:	f7fa f8e0 	bl	8000944 <__addsf3>
 8006784:	4601      	mov	r1, r0
 8006786:	4620      	mov	r0, r4
 8006788:	f7fa f8da 	bl	8000940 <__aeabi_fsub>
 800678c:	e7d9      	b.n	8006742 <__kernel_sinf+0x86>
 800678e:	bf00      	nop
 8006790:	2f2ec9d3 	.word	0x2f2ec9d3
 8006794:	32d72f34 	.word	0x32d72f34
 8006798:	3638ef1b 	.word	0x3638ef1b
 800679c:	39500d01 	.word	0x39500d01
 80067a0:	3c088889 	.word	0x3c088889
 80067a4:	3e2aaaab 	.word	0x3e2aaaab

080067a8 <__ieee754_rem_pio2f>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	4aa4      	ldr	r2, [pc, #656]	@ (8006a40 <__ieee754_rem_pio2f+0x298>)
 80067ae:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80067b2:	4590      	cmp	r8, r2
 80067b4:	460c      	mov	r4, r1
 80067b6:	4682      	mov	sl, r0
 80067b8:	b087      	sub	sp, #28
 80067ba:	d804      	bhi.n	80067c6 <__ieee754_rem_pio2f+0x1e>
 80067bc:	2300      	movs	r3, #0
 80067be:	6008      	str	r0, [r1, #0]
 80067c0:	604b      	str	r3, [r1, #4]
 80067c2:	2500      	movs	r5, #0
 80067c4:	e01d      	b.n	8006802 <__ieee754_rem_pio2f+0x5a>
 80067c6:	4a9f      	ldr	r2, [pc, #636]	@ (8006a44 <__ieee754_rem_pio2f+0x29c>)
 80067c8:	4590      	cmp	r8, r2
 80067ca:	d84f      	bhi.n	800686c <__ieee754_rem_pio2f+0xc4>
 80067cc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80067d0:	2800      	cmp	r0, #0
 80067d2:	499d      	ldr	r1, [pc, #628]	@ (8006a48 <__ieee754_rem_pio2f+0x2a0>)
 80067d4:	4f9d      	ldr	r7, [pc, #628]	@ (8006a4c <__ieee754_rem_pio2f+0x2a4>)
 80067d6:	f025 050f 	bic.w	r5, r5, #15
 80067da:	dd24      	ble.n	8006826 <__ieee754_rem_pio2f+0x7e>
 80067dc:	f7fa f8b0 	bl	8000940 <__aeabi_fsub>
 80067e0:	42bd      	cmp	r5, r7
 80067e2:	4606      	mov	r6, r0
 80067e4:	d011      	beq.n	800680a <__ieee754_rem_pio2f+0x62>
 80067e6:	499a      	ldr	r1, [pc, #616]	@ (8006a50 <__ieee754_rem_pio2f+0x2a8>)
 80067e8:	f7fa f8aa 	bl	8000940 <__aeabi_fsub>
 80067ec:	4601      	mov	r1, r0
 80067ee:	4605      	mov	r5, r0
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7fa f8a5 	bl	8000940 <__aeabi_fsub>
 80067f6:	4996      	ldr	r1, [pc, #600]	@ (8006a50 <__ieee754_rem_pio2f+0x2a8>)
 80067f8:	f7fa f8a2 	bl	8000940 <__aeabi_fsub>
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	2501      	movs	r5, #1
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	4628      	mov	r0, r5
 8006804:	b007      	add	sp, #28
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	4992      	ldr	r1, [pc, #584]	@ (8006a54 <__ieee754_rem_pio2f+0x2ac>)
 800680c:	f7fa f898 	bl	8000940 <__aeabi_fsub>
 8006810:	4991      	ldr	r1, [pc, #580]	@ (8006a58 <__ieee754_rem_pio2f+0x2b0>)
 8006812:	4606      	mov	r6, r0
 8006814:	f7fa f894 	bl	8000940 <__aeabi_fsub>
 8006818:	4601      	mov	r1, r0
 800681a:	4605      	mov	r5, r0
 800681c:	4630      	mov	r0, r6
 800681e:	f7fa f88f 	bl	8000940 <__aeabi_fsub>
 8006822:	498d      	ldr	r1, [pc, #564]	@ (8006a58 <__ieee754_rem_pio2f+0x2b0>)
 8006824:	e7e8      	b.n	80067f8 <__ieee754_rem_pio2f+0x50>
 8006826:	f7fa f88d 	bl	8000944 <__addsf3>
 800682a:	42bd      	cmp	r5, r7
 800682c:	4606      	mov	r6, r0
 800682e:	d00f      	beq.n	8006850 <__ieee754_rem_pio2f+0xa8>
 8006830:	4987      	ldr	r1, [pc, #540]	@ (8006a50 <__ieee754_rem_pio2f+0x2a8>)
 8006832:	f7fa f887 	bl	8000944 <__addsf3>
 8006836:	4601      	mov	r1, r0
 8006838:	4605      	mov	r5, r0
 800683a:	4630      	mov	r0, r6
 800683c:	f7fa f880 	bl	8000940 <__aeabi_fsub>
 8006840:	4983      	ldr	r1, [pc, #524]	@ (8006a50 <__ieee754_rem_pio2f+0x2a8>)
 8006842:	f7fa f87f 	bl	8000944 <__addsf3>
 8006846:	6025      	str	r5, [r4, #0]
 8006848:	6060      	str	r0, [r4, #4]
 800684a:	f04f 35ff 	mov.w	r5, #4294967295
 800684e:	e7d8      	b.n	8006802 <__ieee754_rem_pio2f+0x5a>
 8006850:	4980      	ldr	r1, [pc, #512]	@ (8006a54 <__ieee754_rem_pio2f+0x2ac>)
 8006852:	f7fa f877 	bl	8000944 <__addsf3>
 8006856:	4980      	ldr	r1, [pc, #512]	@ (8006a58 <__ieee754_rem_pio2f+0x2b0>)
 8006858:	4606      	mov	r6, r0
 800685a:	f7fa f873 	bl	8000944 <__addsf3>
 800685e:	4601      	mov	r1, r0
 8006860:	4605      	mov	r5, r0
 8006862:	4630      	mov	r0, r6
 8006864:	f7fa f86c 	bl	8000940 <__aeabi_fsub>
 8006868:	497b      	ldr	r1, [pc, #492]	@ (8006a58 <__ieee754_rem_pio2f+0x2b0>)
 800686a:	e7ea      	b.n	8006842 <__ieee754_rem_pio2f+0x9a>
 800686c:	4a7b      	ldr	r2, [pc, #492]	@ (8006a5c <__ieee754_rem_pio2f+0x2b4>)
 800686e:	4590      	cmp	r8, r2
 8006870:	f200 8095 	bhi.w	800699e <__ieee754_rem_pio2f+0x1f6>
 8006874:	f000 f8fe 	bl	8006a74 <fabsf>
 8006878:	4979      	ldr	r1, [pc, #484]	@ (8006a60 <__ieee754_rem_pio2f+0x2b8>)
 800687a:	4606      	mov	r6, r0
 800687c:	f7fa f96a 	bl	8000b54 <__aeabi_fmul>
 8006880:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006884:	f7fa f85e 	bl	8000944 <__addsf3>
 8006888:	f7fa fb2a 	bl	8000ee0 <__aeabi_f2iz>
 800688c:	4605      	mov	r5, r0
 800688e:	f7fa f90d 	bl	8000aac <__aeabi_i2f>
 8006892:	496d      	ldr	r1, [pc, #436]	@ (8006a48 <__ieee754_rem_pio2f+0x2a0>)
 8006894:	4681      	mov	r9, r0
 8006896:	f7fa f95d 	bl	8000b54 <__aeabi_fmul>
 800689a:	4601      	mov	r1, r0
 800689c:	4630      	mov	r0, r6
 800689e:	f7fa f84f 	bl	8000940 <__aeabi_fsub>
 80068a2:	496b      	ldr	r1, [pc, #428]	@ (8006a50 <__ieee754_rem_pio2f+0x2a8>)
 80068a4:	4607      	mov	r7, r0
 80068a6:	4648      	mov	r0, r9
 80068a8:	f7fa f954 	bl	8000b54 <__aeabi_fmul>
 80068ac:	2d1f      	cmp	r5, #31
 80068ae:	4606      	mov	r6, r0
 80068b0:	dc0e      	bgt.n	80068d0 <__ieee754_rem_pio2f+0x128>
 80068b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a64 <__ieee754_rem_pio2f+0x2bc>)
 80068b4:	1e69      	subs	r1, r5, #1
 80068b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80068ba:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80068be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <__ieee754_rem_pio2f+0x128>
 80068c6:	4631      	mov	r1, r6
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7fa f839 	bl	8000940 <__aeabi_fsub>
 80068ce:	e00b      	b.n	80068e8 <__ieee754_rem_pio2f+0x140>
 80068d0:	4631      	mov	r1, r6
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7fa f834 	bl	8000940 <__aeabi_fsub>
 80068d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80068dc:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	ea4f 5be8 	mov.w	fp, r8, asr #23
 80068e6:	dc01      	bgt.n	80068ec <__ieee754_rem_pio2f+0x144>
 80068e8:	6020      	str	r0, [r4, #0]
 80068ea:	e026      	b.n	800693a <__ieee754_rem_pio2f+0x192>
 80068ec:	4959      	ldr	r1, [pc, #356]	@ (8006a54 <__ieee754_rem_pio2f+0x2ac>)
 80068ee:	4648      	mov	r0, r9
 80068f0:	f7fa f930 	bl	8000b54 <__aeabi_fmul>
 80068f4:	4606      	mov	r6, r0
 80068f6:	4601      	mov	r1, r0
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7fa f821 	bl	8000940 <__aeabi_fsub>
 80068fe:	4601      	mov	r1, r0
 8006900:	4680      	mov	r8, r0
 8006902:	4638      	mov	r0, r7
 8006904:	f7fa f81c 	bl	8000940 <__aeabi_fsub>
 8006908:	4631      	mov	r1, r6
 800690a:	f7fa f819 	bl	8000940 <__aeabi_fsub>
 800690e:	4606      	mov	r6, r0
 8006910:	4951      	ldr	r1, [pc, #324]	@ (8006a58 <__ieee754_rem_pio2f+0x2b0>)
 8006912:	4648      	mov	r0, r9
 8006914:	f7fa f91e 	bl	8000b54 <__aeabi_fmul>
 8006918:	4631      	mov	r1, r6
 800691a:	f7fa f811 	bl	8000940 <__aeabi_fsub>
 800691e:	4601      	mov	r1, r0
 8006920:	4606      	mov	r6, r0
 8006922:	4640      	mov	r0, r8
 8006924:	f7fa f80c 	bl	8000940 <__aeabi_fsub>
 8006928:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800692c:	ebab 0b03 	sub.w	fp, fp, r3
 8006930:	f1bb 0f19 	cmp.w	fp, #25
 8006934:	dc18      	bgt.n	8006968 <__ieee754_rem_pio2f+0x1c0>
 8006936:	4647      	mov	r7, r8
 8006938:	6020      	str	r0, [r4, #0]
 800693a:	f8d4 8000 	ldr.w	r8, [r4]
 800693e:	4638      	mov	r0, r7
 8006940:	4641      	mov	r1, r8
 8006942:	f7f9 fffd 	bl	8000940 <__aeabi_fsub>
 8006946:	4631      	mov	r1, r6
 8006948:	f7f9 fffa 	bl	8000940 <__aeabi_fsub>
 800694c:	f1ba 0f00 	cmp.w	sl, #0
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	f6bf af56 	bge.w	8006802 <__ieee754_rem_pio2f+0x5a>
 8006956:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800695a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800695e:	f8c4 8000 	str.w	r8, [r4]
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	426d      	negs	r5, r5
 8006966:	e74c      	b.n	8006802 <__ieee754_rem_pio2f+0x5a>
 8006968:	493f      	ldr	r1, [pc, #252]	@ (8006a68 <__ieee754_rem_pio2f+0x2c0>)
 800696a:	4648      	mov	r0, r9
 800696c:	f7fa f8f2 	bl	8000b54 <__aeabi_fmul>
 8006970:	4606      	mov	r6, r0
 8006972:	4601      	mov	r1, r0
 8006974:	4640      	mov	r0, r8
 8006976:	f7f9 ffe3 	bl	8000940 <__aeabi_fsub>
 800697a:	4601      	mov	r1, r0
 800697c:	4607      	mov	r7, r0
 800697e:	4640      	mov	r0, r8
 8006980:	f7f9 ffde 	bl	8000940 <__aeabi_fsub>
 8006984:	4631      	mov	r1, r6
 8006986:	f7f9 ffdb 	bl	8000940 <__aeabi_fsub>
 800698a:	4606      	mov	r6, r0
 800698c:	4937      	ldr	r1, [pc, #220]	@ (8006a6c <__ieee754_rem_pio2f+0x2c4>)
 800698e:	4648      	mov	r0, r9
 8006990:	f7fa f8e0 	bl	8000b54 <__aeabi_fmul>
 8006994:	4631      	mov	r1, r6
 8006996:	f7f9 ffd3 	bl	8000940 <__aeabi_fsub>
 800699a:	4606      	mov	r6, r0
 800699c:	e793      	b.n	80068c6 <__ieee754_rem_pio2f+0x11e>
 800699e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80069a2:	d305      	bcc.n	80069b0 <__ieee754_rem_pio2f+0x208>
 80069a4:	4601      	mov	r1, r0
 80069a6:	f7f9 ffcb 	bl	8000940 <__aeabi_fsub>
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6020      	str	r0, [r4, #0]
 80069ae:	e708      	b.n	80067c2 <__ieee754_rem_pio2f+0x1a>
 80069b0:	ea4f 56e8 	mov.w	r6, r8, asr #23
 80069b4:	3e86      	subs	r6, #134	@ 0x86
 80069b6:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7fa fa90 	bl	8000ee0 <__aeabi_f2iz>
 80069c0:	f7fa f874 	bl	8000aac <__aeabi_i2f>
 80069c4:	4601      	mov	r1, r0
 80069c6:	9003      	str	r0, [sp, #12]
 80069c8:	4640      	mov	r0, r8
 80069ca:	f7f9 ffb9 	bl	8000940 <__aeabi_fsub>
 80069ce:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80069d2:	f7fa f8bf 	bl	8000b54 <__aeabi_fmul>
 80069d6:	4607      	mov	r7, r0
 80069d8:	f7fa fa82 	bl	8000ee0 <__aeabi_f2iz>
 80069dc:	f7fa f866 	bl	8000aac <__aeabi_i2f>
 80069e0:	4601      	mov	r1, r0
 80069e2:	9004      	str	r0, [sp, #16]
 80069e4:	4605      	mov	r5, r0
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7f9 ffaa 	bl	8000940 <__aeabi_fsub>
 80069ec:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80069f0:	f7fa f8b0 	bl	8000b54 <__aeabi_fmul>
 80069f4:	2100      	movs	r1, #0
 80069f6:	9005      	str	r0, [sp, #20]
 80069f8:	f7fa fa40 	bl	8000e7c <__aeabi_fcmpeq>
 80069fc:	b1f0      	cbz	r0, 8006a3c <__ieee754_rem_pio2f+0x294>
 80069fe:	2100      	movs	r1, #0
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7fa fa3b 	bl	8000e7c <__aeabi_fcmpeq>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	bf14      	ite	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	2302      	moveq	r3, #2
 8006a0e:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <__ieee754_rem_pio2f+0x2c8>)
 8006a10:	4621      	mov	r1, r4
 8006a12:	9201      	str	r2, [sp, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	a803      	add	r0, sp, #12
 8006a18:	9200      	str	r2, [sp, #0]
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	f000 f82e 	bl	8006a7c <__kernel_rem_pio2f>
 8006a20:	f1ba 0f00 	cmp.w	sl, #0
 8006a24:	4605      	mov	r5, r0
 8006a26:	f6bf aeec 	bge.w	8006802 <__ieee754_rem_pio2f+0x5a>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	e793      	b.n	8006964 <__ieee754_rem_pio2f+0x1bc>
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e7e6      	b.n	8006a0e <__ieee754_rem_pio2f+0x266>
 8006a40:	3f490fd8 	.word	0x3f490fd8
 8006a44:	4016cbe3 	.word	0x4016cbe3
 8006a48:	3fc90f80 	.word	0x3fc90f80
 8006a4c:	3fc90fd0 	.word	0x3fc90fd0
 8006a50:	37354443 	.word	0x37354443
 8006a54:	37354400 	.word	0x37354400
 8006a58:	2e85a308 	.word	0x2e85a308
 8006a5c:	43490f80 	.word	0x43490f80
 8006a60:	3f22f984 	.word	0x3f22f984
 8006a64:	0800c3cc 	.word	0x0800c3cc
 8006a68:	2e85a300 	.word	0x2e85a300
 8006a6c:	248d3132 	.word	0x248d3132
 8006a70:	0800c44c 	.word	0x0800c44c

08006a74 <fabsf>:
 8006a74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006a78:	4770      	bx	lr
	...

08006a7c <__kernel_rem_pio2f>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	b0db      	sub	sp, #364	@ 0x16c
 8006a82:	9202      	str	r2, [sp, #8]
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006a88:	4bad      	ldr	r3, [pc, #692]	@ (8006d40 <__kernel_rem_pio2f+0x2c4>)
 8006a8a:	9005      	str	r0, [sp, #20]
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	9100      	str	r1, [sp, #0]
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	9b02      	ldr	r3, [sp, #8]
 8006a9c:	1d1a      	adds	r2, r3, #4
 8006a9e:	f2c0 8099 	blt.w	8006bd4 <__kernel_rem_pio2f+0x158>
 8006aa2:	1edc      	subs	r4, r3, #3
 8006aa4:	bf48      	it	mi
 8006aa6:	1d1c      	addmi	r4, r3, #4
 8006aa8:	10e4      	asrs	r4, r4, #3
 8006aaa:	2500      	movs	r5, #0
 8006aac:	f04f 0b00 	mov.w	fp, #0
 8006ab0:	1c67      	adds	r7, r4, #1
 8006ab2:	00fb      	lsls	r3, r7, #3
 8006ab4:	9306      	str	r3, [sp, #24]
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	9a03      	ldr	r2, [sp, #12]
 8006aba:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	eba4 0802 	sub.w	r8, r4, r2
 8006ac4:	eb03 0902 	add.w	r9, r3, r2
 8006ac8:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006aca:	ae1e      	add	r6, sp, #120	@ 0x78
 8006acc:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006ad0:	454d      	cmp	r5, r9
 8006ad2:	f340 8081 	ble.w	8006bd8 <__kernel_rem_pio2f+0x15c>
 8006ad6:	9a04      	ldr	r2, [sp, #16]
 8006ad8:	ab1e      	add	r3, sp, #120	@ 0x78
 8006ada:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006ade:	f04f 0900 	mov.w	r9, #0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 8006ae8:	9a01      	ldr	r2, [sp, #4]
 8006aea:	4591      	cmp	r9, r2
 8006aec:	f340 809c 	ble.w	8006c28 <__kernel_rem_pio2f+0x1ac>
 8006af0:	4613      	mov	r3, r2
 8006af2:	aa0a      	add	r2, sp, #40	@ 0x28
 8006af4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006af8:	9308      	str	r3, [sp, #32]
 8006afa:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006afc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b00:	9c01      	ldr	r4, [sp, #4]
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006b08:	4646      	mov	r6, r8
 8006b0a:	4625      	mov	r5, r4
 8006b0c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006b10:	ab5a      	add	r3, sp, #360	@ 0x168
 8006b12:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b16:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006b1a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	f300 8087 	bgt.w	8006c32 <__kernel_rem_pio2f+0x1b6>
 8006b24:	4639      	mov	r1, r7
 8006b26:	4658      	mov	r0, fp
 8006b28:	f000 fa48 	bl	8006fbc <scalbnf>
 8006b2c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006b30:	4605      	mov	r5, r0
 8006b32:	f7fa f80f 	bl	8000b54 <__aeabi_fmul>
 8006b36:	f000 fa8d 	bl	8007054 <floorf>
 8006b3a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006b3e:	f7fa f809 	bl	8000b54 <__aeabi_fmul>
 8006b42:	4601      	mov	r1, r0
 8006b44:	4628      	mov	r0, r5
 8006b46:	f7f9 fefb 	bl	8000940 <__aeabi_fsub>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	f7fa f9c8 	bl	8000ee0 <__aeabi_f2iz>
 8006b50:	4606      	mov	r6, r0
 8006b52:	f7f9 ffab 	bl	8000aac <__aeabi_i2f>
 8006b56:	4601      	mov	r1, r0
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f7f9 fef1 	bl	8000940 <__aeabi_fsub>
 8006b5e:	2f00      	cmp	r7, #0
 8006b60:	4681      	mov	r9, r0
 8006b62:	f340 8083 	ble.w	8006c6c <__kernel_rem_pio2f+0x1f0>
 8006b66:	1e62      	subs	r2, r4, #1
 8006b68:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b6a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006b6e:	f1c7 0108 	rsb	r1, r7, #8
 8006b72:	fa45 f301 	asr.w	r3, r5, r1
 8006b76:	441e      	add	r6, r3
 8006b78:	408b      	lsls	r3, r1
 8006b7a:	1aed      	subs	r5, r5, r3
 8006b7c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b82:	f1c7 0307 	rsb	r3, r7, #7
 8006b86:	411d      	asrs	r5, r3
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	dd7c      	ble.n	8006c86 <__kernel_rem_pio2f+0x20a>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4692      	mov	sl, r2
 8006b90:	3601      	adds	r6, #1
 8006b92:	4294      	cmp	r4, r2
 8006b94:	f300 80ac 	bgt.w	8006cf0 <__kernel_rem_pio2f+0x274>
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	dd05      	ble.n	8006ba8 <__kernel_rem_pio2f+0x12c>
 8006b9c:	2f01      	cmp	r7, #1
 8006b9e:	f000 80b8 	beq.w	8006d12 <__kernel_rem_pio2f+0x296>
 8006ba2:	2f02      	cmp	r7, #2
 8006ba4:	f000 80bf 	beq.w	8006d26 <__kernel_rem_pio2f+0x2aa>
 8006ba8:	2d02      	cmp	r5, #2
 8006baa:	d16c      	bne.n	8006c86 <__kernel_rem_pio2f+0x20a>
 8006bac:	4649      	mov	r1, r9
 8006bae:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006bb2:	f7f9 fec5 	bl	8000940 <__aeabi_fsub>
 8006bb6:	4681      	mov	r9, r0
 8006bb8:	f1ba 0f00 	cmp.w	sl, #0
 8006bbc:	d063      	beq.n	8006c86 <__kernel_rem_pio2f+0x20a>
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006bc4:	f000 f9fa 	bl	8006fbc <scalbnf>
 8006bc8:	4601      	mov	r1, r0
 8006bca:	4648      	mov	r0, r9
 8006bcc:	f7f9 feb8 	bl	8000940 <__aeabi_fsub>
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	e058      	b.n	8006c86 <__kernel_rem_pio2f+0x20a>
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	e768      	b.n	8006aaa <__kernel_rem_pio2f+0x2e>
 8006bd8:	eb18 0f05 	cmn.w	r8, r5
 8006bdc:	d407      	bmi.n	8006bee <__kernel_rem_pio2f+0x172>
 8006bde:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006be2:	f7f9 ff63 	bl	8000aac <__aeabi_i2f>
 8006be6:	f846 0b04 	str.w	r0, [r6], #4
 8006bea:	3501      	adds	r5, #1
 8006bec:	e770      	b.n	8006ad0 <__kernel_rem_pio2f+0x54>
 8006bee:	4658      	mov	r0, fp
 8006bf0:	e7f9      	b.n	8006be6 <__kernel_rem_pio2f+0x16a>
 8006bf2:	9307      	str	r3, [sp, #28]
 8006bf4:	9b05      	ldr	r3, [sp, #20]
 8006bf6:	f8da 1000 	ldr.w	r1, [sl]
 8006bfa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006bfe:	f7f9 ffa9 	bl	8000b54 <__aeabi_fmul>
 8006c02:	4601      	mov	r1, r0
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7f9 fe9d 	bl	8000944 <__addsf3>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	f108 0801 	add.w	r8, r8, #1
 8006c12:	9a03      	ldr	r2, [sp, #12]
 8006c14:	f1aa 0a04 	sub.w	sl, sl, #4
 8006c18:	4590      	cmp	r8, r2
 8006c1a:	ddea      	ble.n	8006bf2 <__kernel_rem_pio2f+0x176>
 8006c1c:	f84b 6b04 	str.w	r6, [fp], #4
 8006c20:	f109 0901 	add.w	r9, r9, #1
 8006c24:	3504      	adds	r5, #4
 8006c26:	e75f      	b.n	8006ae8 <__kernel_rem_pio2f+0x6c>
 8006c28:	46aa      	mov	sl, r5
 8006c2a:	461e      	mov	r6, r3
 8006c2c:	f04f 0800 	mov.w	r8, #0
 8006c30:	e7ef      	b.n	8006c12 <__kernel_rem_pio2f+0x196>
 8006c32:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006c36:	4658      	mov	r0, fp
 8006c38:	f7f9 ff8c 	bl	8000b54 <__aeabi_fmul>
 8006c3c:	f7fa f950 	bl	8000ee0 <__aeabi_f2iz>
 8006c40:	f7f9 ff34 	bl	8000aac <__aeabi_i2f>
 8006c44:	4649      	mov	r1, r9
 8006c46:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c48:	f7f9 ff84 	bl	8000b54 <__aeabi_fmul>
 8006c4c:	4601      	mov	r1, r0
 8006c4e:	4658      	mov	r0, fp
 8006c50:	f7f9 fe76 	bl	8000940 <__aeabi_fsub>
 8006c54:	f7fa f944 	bl	8000ee0 <__aeabi_f2iz>
 8006c58:	3d01      	subs	r5, #1
 8006c5a:	f846 0b04 	str.w	r0, [r6], #4
 8006c5e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8006c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c64:	f7f9 fe6e 	bl	8000944 <__addsf3>
 8006c68:	4683      	mov	fp, r0
 8006c6a:	e758      	b.n	8006b1e <__kernel_rem_pio2f+0xa2>
 8006c6c:	d105      	bne.n	8006c7a <__kernel_rem_pio2f+0x1fe>
 8006c6e:	1e63      	subs	r3, r4, #1
 8006c70:	aa0a      	add	r2, sp, #40	@ 0x28
 8006c72:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006c76:	11ed      	asrs	r5, r5, #7
 8006c78:	e786      	b.n	8006b88 <__kernel_rem_pio2f+0x10c>
 8006c7a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006c7e:	f7fa f91b 	bl	8000eb8 <__aeabi_fcmpge>
 8006c82:	4605      	mov	r5, r0
 8006c84:	bb90      	cbnz	r0, 8006cec <__kernel_rem_pio2f+0x270>
 8006c86:	2100      	movs	r1, #0
 8006c88:	4648      	mov	r0, r9
 8006c8a:	f7fa f8f7 	bl	8000e7c <__aeabi_fcmpeq>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f000 8090 	beq.w	8006db4 <__kernel_rem_pio2f+0x338>
 8006c94:	2200      	movs	r2, #0
 8006c96:	1e63      	subs	r3, r4, #1
 8006c98:	9901      	ldr	r1, [sp, #4]
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	da4a      	bge.n	8006d34 <__kernel_rem_pio2f+0x2b8>
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d076      	beq.n	8006d90 <__kernel_rem_pio2f+0x314>
 8006ca2:	3c01      	subs	r4, #1
 8006ca4:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ca6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006caa:	3f08      	subs	r7, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f8      	beq.n	8006ca2 <__kernel_rem_pio2f+0x226>
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006cb6:	f000 f981 	bl	8006fbc <scalbnf>
 8006cba:	46a2      	mov	sl, r4
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8006cc2:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8006cc6:	f1ba 0f00 	cmp.w	sl, #0
 8006cca:	f280 80a1 	bge.w	8006e10 <__kernel_rem_pio2f+0x394>
 8006cce:	4627      	mov	r7, r4
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	f2c0 80cb 	blt.w	8006e6e <__kernel_rem_pio2f+0x3f2>
 8006cd8:	a946      	add	r1, sp, #280	@ 0x118
 8006cda:	4690      	mov	r8, r2
 8006cdc:	f04f 0a00 	mov.w	sl, #0
 8006ce0:	4b18      	ldr	r3, [pc, #96]	@ (8006d44 <__kernel_rem_pio2f+0x2c8>)
 8006ce2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006ce6:	eba4 0907 	sub.w	r9, r4, r7
 8006cea:	e0b4      	b.n	8006e56 <__kernel_rem_pio2f+0x3da>
 8006cec:	2502      	movs	r5, #2
 8006cee:	e74d      	b.n	8006b8c <__kernel_rem_pio2f+0x110>
 8006cf0:	f858 3b04 	ldr.w	r3, [r8], #4
 8006cf4:	f1ba 0f00 	cmp.w	sl, #0
 8006cf8:	d108      	bne.n	8006d0c <__kernel_rem_pio2f+0x290>
 8006cfa:	b123      	cbz	r3, 8006d06 <__kernel_rem_pio2f+0x28a>
 8006cfc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006d00:	f848 3c04 	str.w	r3, [r8, #-4]
 8006d04:	2301      	movs	r3, #1
 8006d06:	469a      	mov	sl, r3
 8006d08:	3201      	adds	r2, #1
 8006d0a:	e742      	b.n	8006b92 <__kernel_rem_pio2f+0x116>
 8006d0c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8006d10:	e7f6      	b.n	8006d00 <__kernel_rem_pio2f+0x284>
 8006d12:	1e62      	subs	r2, r4, #1
 8006d14:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1e:	a90a      	add	r1, sp, #40	@ 0x28
 8006d20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d24:	e740      	b.n	8006ba8 <__kernel_rem_pio2f+0x12c>
 8006d26:	1e62      	subs	r2, r4, #1
 8006d28:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d32:	e7f4      	b.n	8006d1e <__kernel_rem_pio2f+0x2a2>
 8006d34:	a90a      	add	r1, sp, #40	@ 0x28
 8006d36:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	e7ab      	b.n	8006c98 <__kernel_rem_pio2f+0x21c>
 8006d40:	0800c790 	.word	0x0800c790
 8006d44:	0800c764 	.word	0x0800c764
 8006d48:	3301      	adds	r3, #1
 8006d4a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	d0fa      	beq.n	8006d48 <__kernel_rem_pio2f+0x2cc>
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	a91e      	add	r1, sp, #120	@ 0x78
 8006d56:	18a2      	adds	r2, r4, r2
 8006d58:	1c66      	adds	r6, r4, #1
 8006d5a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8006d5e:	441c      	add	r4, r3
 8006d60:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8006d64:	42b4      	cmp	r4, r6
 8006d66:	f6ff aecd 	blt.w	8006b04 <__kernel_rem_pio2f+0x88>
 8006d6a:	9b07      	ldr	r3, [sp, #28]
 8006d6c:	46ab      	mov	fp, r5
 8006d6e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d72:	f7f9 fe9b 	bl	8000aac <__aeabi_i2f>
 8006d76:	f04f 0a00 	mov.w	sl, #0
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	6028      	str	r0, [r5, #0]
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	459a      	cmp	sl, r3
 8006d84:	dd07      	ble.n	8006d96 <__kernel_rem_pio2f+0x31a>
 8006d86:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8006d8a:	3504      	adds	r5, #4
 8006d8c:	3601      	adds	r6, #1
 8006d8e:	e7e9      	b.n	8006d64 <__kernel_rem_pio2f+0x2e8>
 8006d90:	2301      	movs	r3, #1
 8006d92:	9a08      	ldr	r2, [sp, #32]
 8006d94:	e7d9      	b.n	8006d4a <__kernel_rem_pio2f+0x2ce>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	f85b 0904 	ldr.w	r0, [fp], #-4
 8006d9c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8006da0:	f7f9 fed8 	bl	8000b54 <__aeabi_fmul>
 8006da4:	4601      	mov	r1, r0
 8006da6:	4640      	mov	r0, r8
 8006da8:	f7f9 fdcc 	bl	8000944 <__addsf3>
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	4680      	mov	r8, r0
 8006db2:	e7e5      	b.n	8006d80 <__kernel_rem_pio2f+0x304>
 8006db4:	9b06      	ldr	r3, [sp, #24]
 8006db6:	9a02      	ldr	r2, [sp, #8]
 8006db8:	4648      	mov	r0, r9
 8006dba:	1a99      	subs	r1, r3, r2
 8006dbc:	f000 f8fe 	bl	8006fbc <scalbnf>
 8006dc0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	f7fa f877 	bl	8000eb8 <__aeabi_fcmpge>
 8006dca:	b1f8      	cbz	r0, 8006e0c <__kernel_rem_pio2f+0x390>
 8006dcc:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	f7f9 febf 	bl	8000b54 <__aeabi_fmul>
 8006dd6:	f7fa f883 	bl	8000ee0 <__aeabi_f2iz>
 8006dda:	f7f9 fe67 	bl	8000aac <__aeabi_i2f>
 8006dde:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006de2:	4681      	mov	r9, r0
 8006de4:	f7f9 feb6 	bl	8000b54 <__aeabi_fmul>
 8006de8:	4601      	mov	r1, r0
 8006dea:	4640      	mov	r0, r8
 8006dec:	f7f9 fda8 	bl	8000940 <__aeabi_fsub>
 8006df0:	f7fa f876 	bl	8000ee0 <__aeabi_f2iz>
 8006df4:	ab0a      	add	r3, sp, #40	@ 0x28
 8006df6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	3708      	adds	r7, #8
 8006e00:	f7fa f86e 	bl	8000ee0 <__aeabi_f2iz>
 8006e04:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e0a:	e751      	b.n	8006cb0 <__kernel_rem_pio2f+0x234>
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	e7f7      	b.n	8006e00 <__kernel_rem_pio2f+0x384>
 8006e10:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e12:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006e16:	f7f9 fe49 	bl	8000aac <__aeabi_i2f>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fe9a 	bl	8000b54 <__aeabi_fmul>
 8006e20:	4649      	mov	r1, r9
 8006e22:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7f9 fe94 	bl	8000b54 <__aeabi_fmul>
 8006e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e30:	4607      	mov	r7, r0
 8006e32:	e748      	b.n	8006cc6 <__kernel_rem_pio2f+0x24a>
 8006e34:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e38:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006e3c:	9203      	str	r2, [sp, #12]
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	f7f9 fe88 	bl	8000b54 <__aeabi_fmul>
 8006e44:	4601      	mov	r1, r0
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7f9 fd7c 	bl	8000944 <__addsf3>
 8006e4c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e50:	4680      	mov	r8, r0
 8006e52:	f10a 0a01 	add.w	sl, sl, #1
 8006e56:	9901      	ldr	r1, [sp, #4]
 8006e58:	458a      	cmp	sl, r1
 8006e5a:	dc01      	bgt.n	8006e60 <__kernel_rem_pio2f+0x3e4>
 8006e5c:	45d1      	cmp	r9, sl
 8006e5e:	dae9      	bge.n	8006e34 <__kernel_rem_pio2f+0x3b8>
 8006e60:	ab5a      	add	r3, sp, #360	@ 0x168
 8006e62:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006e66:	f849 8ca0 	str.w	r8, [r9, #-160]
 8006e6a:	3f01      	subs	r7, #1
 8006e6c:	e731      	b.n	8006cd2 <__kernel_rem_pio2f+0x256>
 8006e6e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	dc07      	bgt.n	8006e84 <__kernel_rem_pio2f+0x408>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc4e      	bgt.n	8006f16 <__kernel_rem_pio2f+0x49a>
 8006e78:	d02e      	beq.n	8006ed8 <__kernel_rem_pio2f+0x45c>
 8006e7a:	f006 0007 	and.w	r0, r6, #7
 8006e7e:	b05b      	add	sp, #364	@ 0x16c
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d1f7      	bne.n	8006e7a <__kernel_rem_pio2f+0x3fe>
 8006e8a:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8006e8e:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8006e92:	46b8      	mov	r8, r7
 8006e94:	46a2      	mov	sl, r4
 8006e96:	f1ba 0f00 	cmp.w	sl, #0
 8006e9a:	dc49      	bgt.n	8006f30 <__kernel_rem_pio2f+0x4b4>
 8006e9c:	46a1      	mov	r9, r4
 8006e9e:	f1b9 0f01 	cmp.w	r9, #1
 8006ea2:	dc60      	bgt.n	8006f66 <__kernel_rem_pio2f+0x4ea>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	2c01      	cmp	r4, #1
 8006ea8:	dc76      	bgt.n	8006f98 <__kernel_rem_pio2f+0x51c>
 8006eaa:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8006eac:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	d178      	bne.n	8006fa4 <__kernel_rem_pio2f+0x528>
 8006eb2:	9900      	ldr	r1, [sp, #0]
 8006eb4:	600a      	str	r2, [r1, #0]
 8006eb6:	460a      	mov	r2, r1
 8006eb8:	604b      	str	r3, [r1, #4]
 8006eba:	6090      	str	r0, [r2, #8]
 8006ebc:	e7dd      	b.n	8006e7a <__kernel_rem_pio2f+0x3fe>
 8006ebe:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006ec2:	f7f9 fd3f 	bl	8000944 <__addsf3>
 8006ec6:	3c01      	subs	r4, #1
 8006ec8:	2c00      	cmp	r4, #0
 8006eca:	daf8      	bge.n	8006ebe <__kernel_rem_pio2f+0x442>
 8006ecc:	b10d      	cbz	r5, 8006ed2 <__kernel_rem_pio2f+0x456>
 8006ece:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006ed2:	9b00      	ldr	r3, [sp, #0]
 8006ed4:	6018      	str	r0, [r3, #0]
 8006ed6:	e7d0      	b.n	8006e7a <__kernel_rem_pio2f+0x3fe>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	af32      	add	r7, sp, #200	@ 0xc8
 8006edc:	e7f4      	b.n	8006ec8 <__kernel_rem_pio2f+0x44c>
 8006ede:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8006ee2:	f7f9 fd2f 	bl	8000944 <__addsf3>
 8006ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006eea:	f1b8 0f00 	cmp.w	r8, #0
 8006eee:	daf6      	bge.n	8006ede <__kernel_rem_pio2f+0x462>
 8006ef0:	b1ad      	cbz	r5, 8006f1e <__kernel_rem_pio2f+0x4a2>
 8006ef2:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8006ef6:	9a00      	ldr	r2, [sp, #0]
 8006ef8:	4601      	mov	r1, r0
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8006efe:	f7f9 fd1f 	bl	8000940 <__aeabi_fsub>
 8006f02:	f04f 0801 	mov.w	r8, #1
 8006f06:	4544      	cmp	r4, r8
 8006f08:	da0b      	bge.n	8006f22 <__kernel_rem_pio2f+0x4a6>
 8006f0a:	b10d      	cbz	r5, 8006f10 <__kernel_rem_pio2f+0x494>
 8006f0c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006f10:	9b00      	ldr	r3, [sp, #0]
 8006f12:	6058      	str	r0, [r3, #4]
 8006f14:	e7b1      	b.n	8006e7a <__kernel_rem_pio2f+0x3fe>
 8006f16:	46a0      	mov	r8, r4
 8006f18:	2000      	movs	r0, #0
 8006f1a:	af32      	add	r7, sp, #200	@ 0xc8
 8006f1c:	e7e5      	b.n	8006eea <__kernel_rem_pio2f+0x46e>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	e7e9      	b.n	8006ef6 <__kernel_rem_pio2f+0x47a>
 8006f22:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006f26:	f7f9 fd0d 	bl	8000944 <__addsf3>
 8006f2a:	f108 0801 	add.w	r8, r8, #1
 8006f2e:	e7ea      	b.n	8006f06 <__kernel_rem_pio2f+0x48a>
 8006f30:	f8d8 3000 	ldr.w	r3, [r8]
 8006f34:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	9302      	str	r3, [sp, #8]
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	f7f9 fd00 	bl	8000944 <__addsf3>
 8006f44:	9a01      	ldr	r2, [sp, #4]
 8006f46:	4601      	mov	r1, r0
 8006f48:	4681      	mov	r9, r0
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7f9 fcf8 	bl	8000940 <__aeabi_fsub>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7f9 fcf4 	bl	8000944 <__addsf3>
 8006f5c:	f848 0904 	str.w	r0, [r8], #-4
 8006f60:	f8c8 9000 	str.w	r9, [r8]
 8006f64:	e797      	b.n	8006e96 <__kernel_rem_pio2f+0x41a>
 8006f66:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006f6a:	f8d7 a000 	ldr.w	sl, [r7]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	4651      	mov	r1, sl
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	f7f9 fce6 	bl	8000944 <__addsf3>
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 fcde 	bl	8000940 <__aeabi_fsub>
 8006f84:	4651      	mov	r1, sl
 8006f86:	f7f9 fcdd 	bl	8000944 <__addsf3>
 8006f8a:	f847 0904 	str.w	r0, [r7], #-4
 8006f8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f92:	f8c7 8000 	str.w	r8, [r7]
 8006f96:	e782      	b.n	8006e9e <__kernel_rem_pio2f+0x422>
 8006f98:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8006f9c:	f7f9 fcd2 	bl	8000944 <__addsf3>
 8006fa0:	3c01      	subs	r4, #1
 8006fa2:	e780      	b.n	8006ea6 <__kernel_rem_pio2f+0x42a>
 8006fa4:	9900      	ldr	r1, [sp, #0]
 8006fa6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8006faa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006fae:	600a      	str	r2, [r1, #0]
 8006fb0:	604b      	str	r3, [r1, #4]
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006fb8:	e77f      	b.n	8006eba <__kernel_rem_pio2f+0x43e>
 8006fba:	bf00      	nop

08006fbc <scalbnf>:
 8006fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	d02e      	beq.n	8007028 <scalbnf+0x6c>
 8006fca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006fce:	d304      	bcc.n	8006fda <scalbnf+0x1e>
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	f7f9 fcb7 	bl	8000944 <__addsf3>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e026      	b.n	8007028 <scalbnf+0x6c>
 8006fda:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006fde:	d118      	bne.n	8007012 <scalbnf+0x56>
 8006fe0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006fe4:	f7f9 fdb6 	bl	8000b54 <__aeabi_fmul>
 8006fe8:	4a17      	ldr	r2, [pc, #92]	@ (8007048 <scalbnf+0x8c>)
 8006fea:	4603      	mov	r3, r0
 8006fec:	4295      	cmp	r5, r2
 8006fee:	db0c      	blt.n	800700a <scalbnf+0x4e>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006ff6:	3a19      	subs	r2, #25
 8006ff8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006ffc:	428d      	cmp	r5, r1
 8006ffe:	dd0a      	ble.n	8007016 <scalbnf+0x5a>
 8007000:	4912      	ldr	r1, [pc, #72]	@ (800704c <scalbnf+0x90>)
 8007002:	4618      	mov	r0, r3
 8007004:	f361 001e 	bfi	r0, r1, #0, #31
 8007008:	e000      	b.n	800700c <scalbnf+0x50>
 800700a:	4911      	ldr	r1, [pc, #68]	@ (8007050 <scalbnf+0x94>)
 800700c:	f7f9 fda2 	bl	8000b54 <__aeabi_fmul>
 8007010:	e7e1      	b.n	8006fd6 <scalbnf+0x1a>
 8007012:	0dd2      	lsrs	r2, r2, #23
 8007014:	e7f0      	b.n	8006ff8 <scalbnf+0x3c>
 8007016:	1951      	adds	r1, r2, r5
 8007018:	29fe      	cmp	r1, #254	@ 0xfe
 800701a:	dcf1      	bgt.n	8007000 <scalbnf+0x44>
 800701c:	2900      	cmp	r1, #0
 800701e:	dd05      	ble.n	800702c <scalbnf+0x70>
 8007020:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007024:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007028:	4618      	mov	r0, r3
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	f111 0f16 	cmn.w	r1, #22
 8007030:	da01      	bge.n	8007036 <scalbnf+0x7a>
 8007032:	4907      	ldr	r1, [pc, #28]	@ (8007050 <scalbnf+0x94>)
 8007034:	e7e5      	b.n	8007002 <scalbnf+0x46>
 8007036:	f101 0019 	add.w	r0, r1, #25
 800703a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800703e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8007042:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007046:	e7e1      	b.n	800700c <scalbnf+0x50>
 8007048:	ffff3cb0 	.word	0xffff3cb0
 800704c:	7149f2ca 	.word	0x7149f2ca
 8007050:	0da24260 	.word	0x0da24260

08007054 <floorf>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800705a:	3d7f      	subs	r5, #127	@ 0x7f
 800705c:	2d16      	cmp	r5, #22
 800705e:	4601      	mov	r1, r0
 8007060:	4604      	mov	r4, r0
 8007062:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8007066:	dc26      	bgt.n	80070b6 <floorf+0x62>
 8007068:	2d00      	cmp	r5, #0
 800706a:	da0f      	bge.n	800708c <floorf+0x38>
 800706c:	4917      	ldr	r1, [pc, #92]	@ (80070cc <floorf+0x78>)
 800706e:	f7f9 fc69 	bl	8000944 <__addsf3>
 8007072:	2100      	movs	r1, #0
 8007074:	f7f9 ff2a 	bl	8000ecc <__aeabi_fcmpgt>
 8007078:	b130      	cbz	r0, 8007088 <floorf+0x34>
 800707a:	2c00      	cmp	r4, #0
 800707c:	da23      	bge.n	80070c6 <floorf+0x72>
 800707e:	2e00      	cmp	r6, #0
 8007080:	4c13      	ldr	r4, [pc, #76]	@ (80070d0 <floorf+0x7c>)
 8007082:	bf08      	it	eq
 8007084:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007088:	4621      	mov	r1, r4
 800708a:	e01a      	b.n	80070c2 <floorf+0x6e>
 800708c:	4e11      	ldr	r6, [pc, #68]	@ (80070d4 <floorf+0x80>)
 800708e:	412e      	asrs	r6, r5
 8007090:	4230      	tst	r0, r6
 8007092:	d016      	beq.n	80070c2 <floorf+0x6e>
 8007094:	490d      	ldr	r1, [pc, #52]	@ (80070cc <floorf+0x78>)
 8007096:	f7f9 fc55 	bl	8000944 <__addsf3>
 800709a:	2100      	movs	r1, #0
 800709c:	f7f9 ff16 	bl	8000ecc <__aeabi_fcmpgt>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0f1      	beq.n	8007088 <floorf+0x34>
 80070a4:	2c00      	cmp	r4, #0
 80070a6:	bfbe      	ittt	lt
 80070a8:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80070ac:	412b      	asrlt	r3, r5
 80070ae:	18e4      	addlt	r4, r4, r3
 80070b0:	ea24 0406 	bic.w	r4, r4, r6
 80070b4:	e7e8      	b.n	8007088 <floorf+0x34>
 80070b6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80070ba:	d302      	bcc.n	80070c2 <floorf+0x6e>
 80070bc:	f7f9 fc42 	bl	8000944 <__addsf3>
 80070c0:	4601      	mov	r1, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	2400      	movs	r4, #0
 80070c8:	e7de      	b.n	8007088 <floorf+0x34>
 80070ca:	bf00      	nop
 80070cc:	7149f2ca 	.word	0x7149f2ca
 80070d0:	bf800000 	.word	0xbf800000
 80070d4:	007fffff 	.word	0x007fffff

080070d8 <_init>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr

080070e4 <_fini>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr
